
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000a20  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       000000c4  00000a20  00000a20  00000a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00000ae4  00000ae4  00000b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000af8  00000af8  00000b4c  2**2
                  ALLOC
  4 .debug_abbrev 000003b0  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a2e  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000094c  00000000  00000000  0000192a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000230  00000000  00000000  00002278  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000004b9  00000000  00000000  000024a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000260  00000000  00000000  00002961  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000077  00000000  00000000  00002bc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00002c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000316  00000000  00000000  00002c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  00002f8e  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  00002f9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 5c 	calli 63c <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0b 00 	ori gp,gp,0xb00
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0a f8 	ori r1,r1,0xaf8
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0b 7c 	ori r3,r3,0xb7c

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 01 17 	calli 598 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <setBit>:
#define    TReloadRegL      0x2D << 1
#define    TCounterValueRegH    0x2E << 1  // shows the 16-bit timer value
#define    TCounterValueRegL    0x2F << 1

void setBit(char reg, char mask)
{
 208:	37 9c ff f4 	addi sp,sp,-12
 20c:	5b 8b 00 0c 	sw (sp+12),r11
 210:	5b 8c 00 08 	sw (sp+8),r12
 214:	5b 9d 00 04 	sw (sp+4),ra
 218:	20 2b 00 ff 	andi r11,r1,0xff
	char tmp;
	tmp = spi_read(reg);
 21c:	b9 60 08 00 	mv r1,r11
#define    TReloadRegL      0x2D << 1
#define    TCounterValueRegH    0x2E << 1  // shows the 16-bit timer value
#define    TCounterValueRegL    0x2F << 1

void setBit(char reg, char mask)
{
 220:	20 4c 00 ff 	andi r12,r2,0xff
	char tmp;
	tmp = spi_read(reg);
 224:	f8 00 01 dd 	calli 998 <spi_read>
	spi_write(reg, tmp | mask);   
 228:	b8 2c 10 00 	or r2,r1,r12
 22c:	20 42 00 ff 	andi r2,r2,0xff
 230:	b9 60 08 00 	mv r1,r11
 234:	f8 00 01 ec 	calli 9e4 <spi_write>
}
 238:	2b 9d 00 04 	lw ra,(sp+4)
 23c:	2b 8b 00 0c 	lw r11,(sp+12)
 240:	2b 8c 00 08 	lw r12,(sp+8)
 244:	37 9c 00 0c 	addi sp,sp,12
 248:	c3 a0 00 00 	ret

0000024c <clearBit>:
void clearBit(char reg, char mask)
{
 24c:	37 9c ff f4 	addi sp,sp,-12
 250:	5b 8b 00 0c 	sw (sp+12),r11
 254:	5b 8c 00 08 	sw (sp+8),r12
 258:	5b 9d 00 04 	sw (sp+4),ra
 25c:	20 2b 00 ff 	andi r11,r1,0xff
	char tmp;
	tmp = spi_read(reg);
 260:	b9 60 08 00 	mv r1,r11
	char tmp;
	tmp = spi_read(reg);
	spi_write(reg, tmp | mask);   
}
void clearBit(char reg, char mask)
{
 264:	20 4c 00 ff 	andi r12,r2,0xff
	char tmp;
	tmp = spi_read(reg);
 268:	f8 00 01 cc 	calli 998 <spi_read>
	spi_write(reg, tmp & (~mask));
 26c:	a5 80 10 00 	not r2,r12
 270:	a0 22 08 00 	and r1,r1,r2
 274:	20 22 00 ff 	andi r2,r1,0xff
 278:	b9 60 08 00 	mv r1,r11
 27c:	f8 00 01 da 	calli 9e4 <spi_write>
}
 280:	2b 9d 00 04 	lw ra,(sp+4)
 284:	2b 8b 00 0c 	lw r11,(sp+12)
 288:	2b 8c 00 08 	lw r12,(sp+8)
 28c:	37 9c 00 0c 	addi sp,sp,12
 290:	c3 a0 00 00 	ret

00000294 <initRfidReader>:

void initRfidReader()
{
 294:	37 9c ff fc 	addi sp,sp,-4
 298:	5b 9d 00 04 	sw (sp+4),ra
	//Make Soft Reset
	spi_write(CommandReg, PCD_RESETPHASE);
 29c:	34 01 00 02 	mvi r1,2
 2a0:	34 02 00 0f 	mvi r2,15
 2a4:	f8 00 01 d0 	calli 9e4 <spi_write>
	while (spi_read(CommandReg) & (1<<4));
 2a8:	34 01 00 02 	mvi r1,2
 2ac:	f8 00 01 bb 	calli 998 <spi_read>
 2b0:	20 21 00 10 	andi r1,r1,0x10
 2b4:	5c 20 ff fd 	bne r1,r0,2a8 <initRfidReader+0x14>
    //Wait until the PCD finish reseting
	

	spi_write(TModeReg, 0x8D );      //Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 2b8:	34 01 00 54 	mvi r1,84
 2bc:	34 02 00 8d 	mvi r2,141
 2c0:	f8 00 01 c9 	calli 9e4 <spi_write>
	spi_write( TPrescalerReg, 0x3E );//TModeReg[3..0] + TPrescalerReg
 2c4:	34 01 00 56 	mvi r1,86
 2c8:	34 02 00 3e 	mvi r2,62
 2cc:	f8 00 01 c6 	calli 9e4 <spi_write>
	spi_write( TReloadRegL, 0x30 );           
 2d0:	34 01 00 5a 	mvi r1,90
 2d4:	34 02 00 30 	mvi r2,48
 2d8:	f8 00 01 c3 	calli 9e4 <spi_write>
	spi_write( TReloadRegH, 0x0 );   //WWWWWWWWWARNING: colocar ambo ceros o revisar que hace el registro
 2dc:	34 01 00 58 	mvi r1,88
 2e0:	34 02 00 00 	mvi r2,0
 2e4:	f8 00 01 c0 	calli 9e4 <spi_write>
	spi_write( TxAutoReg, 0x40 );    //100%ASK
 2e8:	34 01 00 2a 	mvi r1,42
 2ec:	34 02 00 40 	mvi r2,64
 2f0:	f8 00 01 bd 	calli 9e4 <spi_write>
	spi_write( ModeReg, 0x3D );
 2f4:	34 01 00 22 	mvi r1,34
 2f8:	34 02 00 3d 	mvi r2,61
 2fc:	f8 00 01 ba 	calli 9e4 <spi_write>

	//AntennaON
	setBit( TxControlReg, 0x03 );
 300:	34 01 00 28 	mvi r1,40
 304:	34 02 00 03 	mvi r2,3
 308:	fb ff ff c0 	calli 208 <setBit>
	
	//FINISH INIT 
}
 30c:	2b 9d 00 04 	lw ra,(sp+4)
 310:	37 9c 00 04 	addi sp,sp,4
 314:	c3 a0 00 00 	ret

00000318 <loop>:

void loop()
{
 318:	37 9c ff f0 	addi sp,sp,-16
 31c:	5b 8b 00 10 	sw (sp+16),r11
 320:	5b 8c 00 0c 	sw (sp+12),r12
 324:	5b 8d 00 08 	sw (sp+8),r13
 328:	5b 9d 00 04 	sw (sp+4),ra
	//Begin Testing
	uart_putstr("                  Acerque La Tarjeta                   " );
 32c:	78 01 00 00 	mvhi r1,0x0
 330:	38 21 0a 20 	ori r1,r1,0xa20
	uart_putstr("\n\r");
 334:	78 0d 00 00 	mvhi r13,0x0
}

void loop()
{
	//Begin Testing
	uart_putstr("                  Acerque La Tarjeta                   " );
 338:	f8 00 01 2e 	calli 7f0 <uart_putstr>
	uart_putstr("\n\r");
 33c:	39 ad 0a 58 	ori r13,r13,0xa58
 340:	b9 a0 08 00 	mv r1,r13
 344:	f8 00 01 2b 	calli 7f0 <uart_putstr>
	msleep(3000);
 348:	34 01 0b b8 	mvi r1,3000
 34c:	f8 00 00 ec 	calli 6fc <msleep>
	

	//IS_CARD
	//REQUEST

	spi_write( BitFramingReg, 0x07 );
 350:	34 01 00 1a 	mvi r1,26
 354:	34 02 00 07 	mvi r2,7
 358:	f8 00 01 a3 	calli 9e4 <spi_write>

	//TO_CARD
	char irqEn = 0x77;
	//Serial.println(irqEn, HEX);
	spi_write( ComIEnReg, irqEn | 0x80 );
 35c:	34 01 00 04 	mvi r1,4
 360:	34 02 00 f7 	mvi r2,247
 364:	f8 00 01 a0 	calli 9e4 <spi_write>
	clearBit( ComIrqReg, 0x80 );
 368:	34 01 00 08 	mvi r1,8
 36c:	34 02 00 80 	mvi r2,128
 370:	fb ff ff b7 	calli 24c <clearBit>
	setBit( FIFOLevelReg, 0x80 );
 374:	34 01 00 14 	mvi r1,20
 378:	34 02 00 80 	mvi r2,128
 37c:	fb ff ff a3 	calli 208 <setBit>
	spi_write( CommandReg, PCD_IDLE );
 380:	34 01 00 02 	mvi r1,2
 384:	34 02 00 00 	mvi r2,0
 388:	f8 00 01 97 	calli 9e4 <spi_write>
	spi_write( FIFODataReg, 0x26 );   //Escribiendo
 38c:	34 01 00 12 	mvi r1,18
 390:	34 02 00 26 	mvi r2,38
 394:	f8 00 01 94 	calli 9e4 <spi_write>
	spi_write( CommandReg, PCD_TRANSCEIVE );
 398:	34 01 00 02 	mvi r1,2
 39c:	34 02 00 0c 	mvi r2,12
 3a0:	f8 00 01 91 	calli 9e4 <spi_write>
	setBit( BitFramingReg, 0x80 );
 3a4:	34 01 00 1a 	mvi r1,26
 3a8:	34 02 00 80 	mvi r2,128
 3ac:	fb ff ff 97 	calli 208 <setBit>

	char flag = 1;
	while(flag)
	{
		//Serial.println("Entro a verificar");
		n =spi_read( ComIrqReg );
 3b0:	34 01 00 08 	mvi r1,8
 3b4:	f8 00 01 79 	calli 998 <spi_read>
 3b8:	b8 20 60 00 	mv r12,r1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
 3bc:	21 8b 00 01 	andi r11,r12,0x1
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
 3c0:	34 01 00 01 	mvi r1,1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
 3c4:	5d 60 00 0a 	bne r11,r0,3ec <loop+0xd4>
	char n;
	char waitIrq = 0x30;


	char flag = 1;
	while(flag)
 3c8:	21 8c 00 30 	andi r12,r12,0x30
		if(n & 0x01)
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
 3cc:	f8 00 00 cc 	calli 6fc <msleep>
	char n;
	char waitIrq = 0x30;


	char flag = 1;
	while(flag)
 3d0:	5d 8b 00 09 	bne r12,r11,3f4 <loop+0xdc>
	{
		//Serial.println("Entro a verificar");
		n =spi_read( ComIrqReg );
 3d4:	34 01 00 08 	mvi r1,8
 3d8:	f8 00 01 70 	calli 998 <spi_read>
 3dc:	b8 20 60 00 	mv r12,r1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
 3e0:	21 8b 00 01 	andi r11,r12,0x1
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
 3e4:	34 01 00 01 	mvi r1,1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
 3e8:	45 60 ff f8 	be r11,r0,3c8 <loop+0xb0>
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
 3ec:	34 01 00 01 	mvi r1,1
 3f0:	f8 00 00 c3 	calli 6fc <msleep>
		
	}
	
	flag=1;

	clearBit ( BitFramingReg, 0x80 );
 3f4:	34 02 00 80 	mvi r2,128
 3f8:	34 01 00 1a 	mvi r1,26
 3fc:	fb ff ff 94 	calli 24c <clearBit>
	char lec;
	lec = spi_read( ErrorReg);
 400:	34 01 00 0c 	mvi r1,12
 404:	f8 00 01 65 	calli 998 <spi_read>
		//Serial.println("status=MI_OK, todo va bien");
		if ( n & irqEn & 0x01 )     // WARNING: Parece ser otra lectura de un posible error, pero pues
			//Serial.println("status=NOTAGERR, NO todo va bien");
	}*/
	
	n = spi_read(FIFOLevelReg); //leer cantidad de datos
 408:	34 01 00 14 	mvi r1,20
 40c:	f8 00 01 63 	calli 998 <spi_read>
 410:	b8 20 60 00 	mv r12,r1
	uart_putchar(n+48);
	uart_putstr("\n\r");
	uart_putstr("-------");
	uart_putstr("\n\r");
	*/
	if(n==0){
 414:	34 0b 00 00 	mvi r11,0
 418:	44 20 00 53 	be r1,r0,564 <loop+0x24c>

		//uart_putchar(secondDigit);
		//uart_putchar(firstDigit);
		//uart_putstr("\n\r");
		
		i=i+1;
 41c:	35 6b 00 01 	addi r11,r11,1
	else{
	char i=0;
	
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
 420:	34 01 00 12 	mvi r1,18

		//uart_putchar(secondDigit);
		//uart_putchar(firstDigit);
		//uart_putstr("\n\r");
		
		i=i+1;
 424:	21 6b 00 ff 	andi r11,r11,0xff
	else{
	char i=0;
	
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
 428:	f8 00 01 5c 	calli 998 <spi_read>
	servo_set_D0(0);
	}
	else{
	char i=0;
	
	while (i<n)
 42c:	55 8b ff fc 	bgu r12,r11,41c <loop+0x104>
	//FIN IS_CARD

	//READ_CARD_SERIAL

	//ANTICOLL
	spi_write( BitFramingReg, 0x00 );
 430:	34 01 00 1a 	mvi r1,26
 434:	34 02 00 00 	mvi r2,0
 438:	f8 00 01 6b 	calli 9e4 <spi_write>
	clearBit( Status2Reg, 0x08 );     //WARGNING: no presente en anterior ejemplo del cuaderno, tal vez puede ser omitido
 43c:	34 01 00 10 	mvi r1,16
 440:	34 02 00 08 	mvi r2,8
 444:	fb ff ff 82 	calli 24c <clearBit>
	
	
	//TO_CARD

	spi_write( ComIEnReg, irqEn | 0x80 );
 448:	34 01 00 04 	mvi r1,4
 44c:	34 02 00 f7 	mvi r2,247
 450:	f8 00 01 65 	calli 9e4 <spi_write>
	clearBit( ComIrqReg, 0x80 );
 454:	34 01 00 08 	mvi r1,8
 458:	34 02 00 80 	mvi r2,128
 45c:	fb ff ff 7c 	calli 24c <clearBit>
	setBit( FIFOLevelReg, 0x80 );
 460:	34 01 00 14 	mvi r1,20
 464:	34 02 00 80 	mvi r2,128
 468:	fb ff ff 68 	calli 208 <setBit>
	spi_write( CommandReg, PCD_IDLE );
 46c:	34 01 00 02 	mvi r1,2
 470:	34 02 00 00 	mvi r2,0
 474:	f8 00 01 5c 	calli 9e4 <spi_write>
	spi_write( FIFODataReg, 0x93 ); //EScribiendo PICC_ANTICOLL
 478:	34 01 00 12 	mvi r1,18
 47c:	34 02 00 93 	mvi r2,147
 480:	f8 00 01 59 	calli 9e4 <spi_write>
	spi_write( FIFODataReg, 0x20 ); //EScribiendo NVB
 484:	34 01 00 12 	mvi r1,18
 488:	34 02 00 20 	mvi r2,32
 48c:	f8 00 01 56 	calli 9e4 <spi_write>
	spi_write( CommandReg, PCD_TRANSCEIVE );
 490:	34 01 00 02 	mvi r1,2
 494:	34 02 00 0c 	mvi r2,12
 498:	f8 00 01 53 	calli 9e4 <spi_write>
	setBit( BitFramingReg, 0x80 );
 49c:	34 01 00 1a 	mvi r1,26
 4a0:	34 02 00 80 	mvi r2,128
 4a4:	fb ff ff 59 	calli 208 <setBit>
	
	while(flag)
	{
		//Serial.println("Entro a verificar");
		n =spi_read( ComIrqReg );
 4a8:	34 01 00 08 	mvi r1,8
 4ac:	f8 00 01 3b 	calli 998 <spi_read>
 4b0:	b8 20 58 00 	mv r11,r1
		if(n & waitIrq){
		//Serial.println("ha cambiado algo");
		flag = 0;
		}
		if(n & 0x01){
 4b4:	21 6c 00 01 	andi r12,r11,0x1
		//Serial.println("TIMEOUT, nada en 25ms");
		flag=0;
		}

		msleep(1);
 4b8:	34 01 00 01 	mvi r1,1
		n =spi_read( ComIrqReg );
		if(n & waitIrq){
		//Serial.println("ha cambiado algo");
		flag = 0;
		}
		if(n & 0x01){
 4bc:	5d 80 00 0a 	bne r12,r0,4e4 <loop+0x1cc>
	spi_write( FIFODataReg, 0x93 ); //EScribiendo PICC_ANTICOLL
	spi_write( FIFODataReg, 0x20 ); //EScribiendo NVB
	spi_write( CommandReg, PCD_TRANSCEIVE );
	setBit( BitFramingReg, 0x80 );
	
	while(flag)
 4c0:	21 6b 00 30 	andi r11,r11,0x30
		if(n & 0x01){
		//Serial.println("TIMEOUT, nada en 25ms");
		flag=0;
		}

		msleep(1);
 4c4:	f8 00 00 8e 	calli 6fc <msleep>
	spi_write( FIFODataReg, 0x93 ); //EScribiendo PICC_ANTICOLL
	spi_write( FIFODataReg, 0x20 ); //EScribiendo NVB
	spi_write( CommandReg, PCD_TRANSCEIVE );
	setBit( BitFramingReg, 0x80 );
	
	while(flag)
 4c8:	5d 6c 00 09 	bne r11,r12,4ec <loop+0x1d4>
	{
		//Serial.println("Entro a verificar");
		n =spi_read( ComIrqReg );
 4cc:	34 01 00 08 	mvi r1,8
 4d0:	f8 00 01 32 	calli 998 <spi_read>
 4d4:	b8 20 58 00 	mv r11,r1
		if(n & waitIrq){
		//Serial.println("ha cambiado algo");
		flag = 0;
		}
		if(n & 0x01){
 4d8:	21 6c 00 01 	andi r12,r11,0x1
		//Serial.println("TIMEOUT, nada en 25ms");
		flag=0;
		}

		msleep(1);
 4dc:	34 01 00 01 	mvi r1,1
		n =spi_read( ComIrqReg );
		if(n & waitIrq){
		//Serial.println("ha cambiado algo");
		flag = 0;
		}
		if(n & 0x01){
 4e0:	45 80 ff f8 	be r12,r0,4c0 <loop+0x1a8>
		//Serial.println("TIMEOUT, nada en 25ms");
		flag=0;
		}

		msleep(1);
 4e4:	34 01 00 01 	mvi r1,1
 4e8:	f8 00 00 85 	calli 6fc <msleep>
	}
	
	flag = 1;

	clearBit( BitFramingReg, 0x80 );
 4ec:	34 01 00 1a 	mvi r1,26
 4f0:	34 02 00 80 	mvi r2,128
 4f4:	fb ff ff 56 	calli 24c <clearBit>

		if ( n & irqEn & 0x01 )// WWWWWWWWARNING: Parece ser otra lectura de un posible error, pero pues
			Serial.println("status=NOTAGERR, NO todo va bien");
	}*/
	
	n = spi_read(FIFOLevelReg); //leer cantidad de datos
 4f8:	34 01 00 14 	mvi r1,20
 4fc:	f8 00 01 27 	calli 998 <spi_read>
 500:	b8 20 60 00 	mv r12,r1
	uart_putstr("-------");
	uart_putstr("\n\r");	
*/
	i=0;
	
	while (i<n)
 504:	44 20 00 07 	be r1,r0,520 <loop+0x208>
 508:	34 0b 00 00 	mvi r11,0

		//uart_putchar(secondDigit);
		//uart_putchar(firstDigit);
		//uart_putstr("\n\r");
		
		i=i+1;
 50c:	35 6b 00 01 	addi r11,r11,1
*/
	i=0;
	
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
 510:	34 01 00 12 	mvi r1,18

		//uart_putchar(secondDigit);
		//uart_putchar(firstDigit);
		//uart_putstr("\n\r");
		
		i=i+1;
 514:	21 6b 00 ff 	andi r11,r11,0xff
*/
	i=0;
	
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
 518:	f8 00 01 20 	calli 998 <spi_read>
	uart_putstr("-------");
	uart_putstr("\n\r");	
*/
	i=0;
	
	while (i<n)
 51c:	55 8b ff fc 	bgu r12,r11,50c <loop+0x1f4>
	//byte validBits;
	validBits = Rd(ControlReg) & 0x07; //Ver nro de bits validos
	Serial.print("Bits validos");Serial.print(validBits, BIN);
	Serial.println();
	*/
	uart_putstr("              Siga             ");
 520:	78 01 00 00 	mvhi r1,0x0
 524:	38 21 0a 90 	ori r1,r1,0xa90
 528:	f8 00 00 b2 	calli 7f0 <uart_putstr>
			uart_putstr("\n\r");			
 52c:	b9 a0 08 00 	mv r1,r13
 530:	f8 00 00 b0 	calli 7f0 <uart_putstr>
			servo_set_D0(180);
 534:	34 01 00 b4 	mvi r1,180
 538:	f8 00 00 f0 	calli 8f8 <servo_set_D0>
			msleep(5000);
 53c:	34 01 13 88 	mvi r1,5000
 540:	f8 00 00 6f 	calli 6fc <msleep>
			servo_set_D0(0);
 544:	34 01 00 00 	mvi r1,0
 548:	f8 00 00 ec 	calli 8f8 <servo_set_D0>

	}
}
 54c:	2b 9d 00 04 	lw ra,(sp+4)
 550:	2b 8b 00 10 	lw r11,(sp+16)
 554:	2b 8c 00 0c 	lw r12,(sp+12)
 558:	2b 8d 00 08 	lw r13,(sp+8)
 55c:	37 9c 00 10 	addi sp,sp,16
 560:	c3 a0 00 00 	ret
	uart_putstr("\n\r");
	uart_putstr("-------");
	uart_putstr("\n\r");
	*/
	if(n==0){
	uart_putstr("              No Hay Ninguna Tarjeta              ");
 564:	78 01 00 00 	mvhi r1,0x0
 568:	38 21 0a 5c 	ori r1,r1,0xa5c
 56c:	f8 00 00 a1 	calli 7f0 <uart_putstr>
	uart_putstr("\n\r");
 570:	b9 a0 08 00 	mv r1,r13
 574:	f8 00 00 9f 	calli 7f0 <uart_putstr>
	servo_set_D0(0);
 578:	34 01 00 00 	mvi r1,0
 57c:	f8 00 00 df 	calli 8f8 <servo_set_D0>
			servo_set_D0(180);
			msleep(5000);
			servo_set_D0(0);

	}
}
 580:	2b 9d 00 04 	lw ra,(sp+4)
 584:	2b 8b 00 10 	lw r11,(sp+16)
 588:	2b 8c 00 0c 	lw r12,(sp+12)
 58c:	2b 8d 00 08 	lw r13,(sp+8)
 590:	37 9c 00 10 	addi sp,sp,16
 594:	c3 a0 00 00 	ret

00000598 <main>:

int main()
{
 598:	37 9c ff f0 	addi sp,sp,-16
 59c:	5b 8b 00 10 	sw (sp+16),r11
 5a0:	5b 8c 00 0c 	sw (sp+12),r12
 5a4:	5b 8d 00 08 	sw (sp+8),r13
 5a8:	5b 9d 00 04 	sw (sp+4),ra
	

	uart_putstr("       Bienvenido         ");
 5ac:	78 01 00 00 	mvhi r1,0x0
 5b0:	38 21 0a b0 	ori r1,r1,0xab0
	uart_putstr("\n\r");	
 5b4:	78 0b 00 00 	mvhi r11,0x0

int main()
{
	

	uart_putstr("       Bienvenido         ");
 5b8:	f8 00 00 8e 	calli 7f0 <uart_putstr>
	uart_putstr("\n\r");	
 5bc:	39 6b 0a 58 	ori r11,r11,0xa58
 5c0:	b9 60 08 00 	mv r1,r11
 5c4:	f8 00 00 8b 	calli 7f0 <uart_putstr>
	unsigned int a = 20;
	unsigned int b = 180;
	int c = 0;
	servo_set_T0(a);
 5c8:	34 01 00 14 	mvi r1,20
 5cc:	f8 00 00 c2 	calli 8d4 <servo_set_T0>
 5d0:	78 0c 00 00 	mvhi r12,0x0

	initRfidReader();
 5d4:	fb ff ff 30 	calli 294 <initRfidReader>
 5d8:	39 8c 0a cc 	ori r12,r12,0xacc
	

	while(1)
	{
		n=uart_getchar();
		if(n=='s')
 5dc:	34 0d 00 73 	mvi r13,115
 5e0:	e0 00 00 07 	bi 5fc <main+0x64>
			servo_set_D0(c);
*/			
		}
		else
		{
			uart_putstr("Ingreso Denegado");
 5e4:	b9 80 08 00 	mv r1,r12
 5e8:	f8 00 00 82 	calli 7f0 <uart_putstr>
			uart_putstr("\n\r");		
 5ec:	b9 60 08 00 	mv r1,r11
 5f0:	f8 00 00 80 	calli 7f0 <uart_putstr>
			servo_set_D0(c);
 5f4:	34 01 00 00 	mvi r1,0
 5f8:	f8 00 00 c0 	calli 8f8 <servo_set_D0>
		
	

	while(1)
	{
		n=uart_getchar();
 5fc:	f8 00 00 6b 	calli 7a8 <uart_getchar>
		if(n=='s')
 600:	5c 2d ff f9 	bne r1,r13,5e4 <main+0x4c>
		{
			loop();
 604:	fb ff ff 45 	calli 318 <loop>
 608:	e3 ff ff fd 	bi 5fc <main+0x64>

0000060c <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 60c:	c3 a0 00 00 	ret

00000610 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 610:	78 01 00 00 	mvhi r1,0x0
 614:	38 21 0b 78 	ori r1,r1,0xb78
 618:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 61c:	78 02 00 00 	mvhi r2,0x0
 620:	38 42 0a f0 	ori r2,r2,0xaf0
 624:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 628:	34 63 00 01 	addi r3,r3,1
 62c:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 630:	34 01 00 0e 	mvi r1,14
 634:	58 41 00 00 	sw (r2+0),r1
}
 638:	c3 a0 00 00 	ret

0000063c <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 63c:	37 9c ff f0 	addi sp,sp,-16
 640:	5b 8b 00 10 	sw (sp+16),r11
 644:	5b 8c 00 0c 	sw (sp+12),r12
 648:	5b 8d 00 08 	sw (sp+8),r13
 64c:	5b 9d 00 04 	sw (sp+4),ra
 650:	78 0b 00 00 	mvhi r11,0x0
 654:	39 6b 0a f8 	ori r11,r11,0xaf8
 658:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 65c:	35 6d 00 80 	addi r13,r11,128
 660:	e0 00 00 04 	bi 670 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 664:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 668:	45 6d 00 08 	be r11,r13,688 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 66c:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 670:	21 81 00 01 	andi r1,r12,0x1
 674:	44 20 ff fc 	be r1,r0,664 <irq_handler+0x28>
 678:	29 61 00 00 	lw r1,(r11+0)
 67c:	35 6b 00 04 	addi r11,r11,4
 680:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 684:	5d 6d ff fa 	bne r11,r13,66c <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 688:	2b 9d 00 04 	lw ra,(sp+4)
 68c:	2b 8b 00 10 	lw r11,(sp+16)
 690:	2b 8c 00 0c 	lw r12,(sp+12)
 694:	2b 8d 00 08 	lw r13,(sp+8)
 698:	37 9c 00 10 	addi sp,sp,16
 69c:	c3 a0 00 00 	ret

000006a0 <isr_init>:

void isr_init()
{
 6a0:	78 01 00 00 	mvhi r1,0x0
 6a4:	78 02 00 00 	mvhi r2,0x0
 6a8:	38 21 0a f8 	ori r1,r1,0xaf8
 6ac:	38 42 06 0c 	ori r2,r2,0x60c
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 6b0:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 6b4:	58 22 00 00 	sw (r1+0),r2
 6b8:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 6bc:	5c 23 ff fe 	bne r1,r3,6b4 <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 6c0:	c3 a0 00 00 	ret

000006c4 <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 6c4:	78 03 00 00 	mvhi r3,0x0
 6c8:	3c 21 00 02 	sli r1,r1,2
 6cc:	38 63 0a f8 	ori r3,r3,0xaf8
 6d0:	b4 61 18 00 	add r3,r3,r1
 6d4:	58 62 00 00 	sw (r3+0),r2
}
 6d8:	c3 a0 00 00 	ret

000006dc <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 6dc:	78 03 00 00 	mvhi r3,0x0
 6e0:	3c 21 00 02 	sli r1,r1,2
 6e4:	38 63 0a f8 	ori r3,r3,0xaf8
 6e8:	78 02 00 00 	mvhi r2,0x0
 6ec:	b4 61 18 00 	add r3,r3,r1
 6f0:	38 42 06 0c 	ori r2,r2,0x60c
 6f4:	58 62 00 00 	sw (r3+0),r2
}
 6f8:	c3 a0 00 00 	ret

000006fc <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 6fc:	78 02 00 00 	mvhi r2,0x0
 700:	38 42 0a f0 	ori r2,r2,0xaf0
 704:	38 03 c3 50 	mvu r3,0xc350
 708:	28 42 00 00 	lw r2,(r2+0)
 70c:	88 23 08 00 	mul r1,r1,r3
 710:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 714:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 718:	34 01 00 08 	mvi r1,8
 71c:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 720:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 724:	20 21 00 01 	andi r1,r1,0x1
 728:	44 20 ff fe 	be r1,r0,720 <msleep+0x24>
}
 72c:	c3 a0 00 00 	ret

00000730 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 730:	78 02 00 00 	mvhi r2,0x0
 734:	38 42 0a f0 	ori r2,r2,0xaf0
 738:	28 42 00 00 	lw r2,(r2+0)
 73c:	08 21 00 32 	muli r1,r1,50
 740:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 744:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 748:	34 01 00 08 	mvi r1,8
 74c:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 750:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 754:	20 21 00 01 	andi r1,r1,0x1
 758:	44 20 ff fe 	be r1,r0,750 <nsleep+0x20>
}
 75c:	c3 a0 00 00 	ret

00000760 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 760:	78 01 00 00 	mvhi r1,0x0
 764:	38 21 0a f0 	ori r1,r1,0xaf0
 768:	28 23 00 00 	lw r3,(r1+0)
 76c:	34 02 13 88 	mvi r2,5000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 770:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 774:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 778:	38 21 0b 78 	ori r1,r1,0xb78

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 77c:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 780:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 784:	78 02 00 00 	mvhi r2,0x0
 788:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 78c:	34 04 00 0e 	mvi r4,14
 790:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 794:	38 21 0a f8 	ori r1,r1,0xaf8
 798:	38 42 06 10 	ori r2,r2,0x610
 79c:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 7a0:	c3 a0 00 00 	ret

000007a4 <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 7a4:	c3 a0 00 00 	ret

000007a8 <uart_getchar>:

char uart_getchar()
{   
 7a8:	78 01 00 00 	mvhi r1,0x0
 7ac:	38 21 0a ec 	ori r1,r1,0xaec
 7b0:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 7b4:	28 41 00 00 	lw r1,(r2+0)
 7b8:	20 21 00 01 	andi r1,r1,0x1
 7bc:	44 20 ff fe 	be r1,r0,7b4 <uart_getchar+0xc>
	return uart0->rxtx;
 7c0:	28 41 00 04 	lw r1,(r2+4)
}
 7c4:	20 21 00 ff 	andi r1,r1,0xff
 7c8:	c3 a0 00 00 	ret

000007cc <uart_putchar>:

void uart_putchar(char c)
{
 7cc:	78 02 00 00 	mvhi r2,0x0
 7d0:	38 42 0a ec 	ori r2,r2,0xaec
 7d4:	28 43 00 00 	lw r3,(r2+0)
 7d8:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 7dc:	28 62 00 00 	lw r2,(r3+0)
 7e0:	20 42 00 10 	andi r2,r2,0x10
 7e4:	5c 40 ff fe 	bne r2,r0,7dc <uart_putchar+0x10>
	uart0->rxtx = c;
 7e8:	58 61 00 04 	sw (r3+4),r1
}
 7ec:	c3 a0 00 00 	ret

000007f0 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 7f0:	40 24 00 00 	lbu r4,(r1+0)
 7f4:	44 80 00 0b 	be r4,r0,820 <uart_putstr+0x30>
 7f8:	78 02 00 00 	mvhi r2,0x0
 7fc:	38 42 0a ec 	ori r2,r2,0xaec
 800:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 804:	28 62 00 00 	lw r2,(r3+0)
 808:	20 42 00 10 	andi r2,r2,0x10
 80c:	5c 40 ff fe 	bne r2,r0,804 <uart_putstr+0x14>
	uart0->rxtx = c;
 810:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 814:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 818:	40 24 00 00 	lbu r4,(r1+0)
 81c:	5c 82 ff fa 	bne r4,r2,804 <uart_putstr+0x14>
 820:	c3 a0 00 00 	ret

00000824 <gpio_get_in>:


char gpio_get_in()
{   
	
	return gpio0->gpio_in;
 824:	78 01 00 00 	mvhi r1,0x0
 828:	38 21 0a e8 	ori r1,r1,0xae8
 82c:	28 21 00 00 	lw r1,(r1+0)
 830:	28 21 00 00 	lw r1,(r1+0)
}
 834:	20 21 00 ff 	andi r1,r1,0xff
 838:	c3 a0 00 00 	ret

0000083c <gpio_get_dir>:

char gpio_get_dir()
{   
	
	return gpio0->gpio_dir;
 83c:	78 01 00 00 	mvhi r1,0x0
 840:	38 21 0a e8 	ori r1,r1,0xae8
 844:	28 21 00 00 	lw r1,(r1+0)
 848:	28 21 00 08 	lw r1,(r1+8)
}
 84c:	20 21 00 ff 	andi r1,r1,0xff
 850:	c3 a0 00 00 	ret

00000854 <gpio_put_out>:


void gpio_put_out(char c)
{
	
	gpio0->gpio_out = c;
 854:	78 02 00 00 	mvhi r2,0x0
 858:	38 42 0a e8 	ori r2,r2,0xae8
 85c:	28 42 00 00 	lw r2,(r2+0)
}



void gpio_put_out(char c)
{
 860:	20 21 00 ff 	andi r1,r1,0xff
	
	gpio0->gpio_out = c;
 864:	58 41 00 04 	sw (r2+4),r1
}
 868:	c3 a0 00 00 	ret

0000086c <gpio_put_dir>:

void gpio_put_dir(char c)
{
	
	gpio0->gpio_dir = c;
 86c:	78 02 00 00 	mvhi r2,0x0
 870:	38 42 0a e8 	ori r2,r2,0xae8
 874:	28 42 00 00 	lw r2,(r2+0)
	
	gpio0->gpio_out = c;
}

void gpio_put_dir(char c)
{
 878:	20 21 00 ff 	andi r1,r1,0xff
	
	gpio0->gpio_dir = c;
 87c:	58 41 00 08 	sw (r2+8),r1
}
 880:	c3 a0 00 00 	ret

00000884 <servo_put_T0>:
 */

void servo_put_T0(int c)
{
	
	servo0->servo_T0 = c;
 884:	78 02 00 00 	mvhi r2,0x0
 888:	38 42 0a e4 	ori r2,r2,0xae4
 88c:	28 42 00 00 	lw r2,(r2+0)
 890:	58 41 00 00 	sw (r2+0),r1
}
 894:	c3 a0 00 00 	ret

00000898 <servo_put_D0>:

void servo_put_D0(int c)
{
	
	servo0->servo_D0 = c;
 898:	78 02 00 00 	mvhi r2,0x0
 89c:	38 42 0a e4 	ori r2,r2,0xae4
 8a0:	28 42 00 00 	lw r2,(r2+0)
 8a4:	58 41 00 04 	sw (r2+4),r1
}
 8a8:	c3 a0 00 00 	ret

000008ac <servo_put_T1>:
void servo_put_T1(int c)
{
	
	servo0->servo_T1 = c;
 8ac:	78 02 00 00 	mvhi r2,0x0
 8b0:	38 42 0a e4 	ori r2,r2,0xae4
 8b4:	28 42 00 00 	lw r2,(r2+0)
 8b8:	58 41 00 08 	sw (r2+8),r1
}
 8bc:	c3 a0 00 00 	ret

000008c0 <servo_put_D1>:

void servo_put_D1(int c)
{
	
	servo0->servo_D1 = c;
 8c0:	78 02 00 00 	mvhi r2,0x0
 8c4:	38 42 0a e4 	ori r2,r2,0xae4
 8c8:	28 42 00 00 	lw r2,(r2+0)
 8cc:	58 41 00 0c 	sw (r2+12),r1
}
 8d0:	c3 a0 00 00 	ret

000008d4 <servo_set_T0>:


void servo_set_T0(unsigned int c)
{      
	
	unsigned int a = 100000*c;
 8d4:	78 04 00 00 	mvhi r4,0x0
 8d8:	38 84 0a e0 	ori r4,r4,0xae0
 8dc:	28 83 00 00 	lw r3,(r4+0)
	servo0->servo_T0 = a;
 8e0:	78 02 00 00 	mvhi r2,0x0
 8e4:	38 42 0a e4 	ori r2,r2,0xae4


void servo_set_T0(unsigned int c)
{      
	
	unsigned int a = 100000*c;
 8e8:	88 23 08 00 	mul r1,r1,r3
	servo0->servo_T0 = a;
 8ec:	28 42 00 00 	lw r2,(r2+0)
 8f0:	58 41 00 00 	sw (r2+0),r1
	
}
 8f4:	c3 a0 00 00 	ret

000008f8 <servo_set_D0>:

void servo_set_D0(unsigned int c)
{
	unsigned int tmp = (c * 10000);
 8f8:	08 21 27 10 	muli r1,r1,10000
	unsigned int b = (tmp/18);
	unsigned int g = b + 100000;
 8fc:	78 04 00 00 	mvhi r4,0x0
}

void servo_set_D0(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
 900:	34 03 00 12 	mvi r3,18
	unsigned int g = b + 100000;
	servo0->servo_D0 = g;
 904:	78 02 00 00 	mvhi r2,0x0

void servo_set_D0(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
	unsigned int g = b + 100000;
 908:	38 84 0a e0 	ori r4,r4,0xae0
}

void servo_set_D0(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
 90c:	8c 23 08 00 	divu r1,r1,r3
	unsigned int g = b + 100000;
	servo0->servo_D0 = g;
 910:	38 42 0a e4 	ori r2,r2,0xae4

void servo_set_D0(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
	unsigned int g = b + 100000;
 914:	28 83 00 00 	lw r3,(r4+0)
	servo0->servo_D0 = g;
 918:	28 42 00 00 	lw r2,(r2+0)

void servo_set_D0(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
	unsigned int g = b + 100000;
 91c:	b4 23 08 00 	add r1,r1,r3
	servo0->servo_D0 = g;
 920:	58 41 00 04 	sw (r2+4),r1
}
 924:	c3 a0 00 00 	ret

00000928 <servo_set_T1>:
void servo_set_T1(unsigned int c)
{       
	unsigned int a = 100000*c;
 928:	78 04 00 00 	mvhi r4,0x0
 92c:	38 84 0a e0 	ori r4,r4,0xae0
 930:	28 83 00 00 	lw r3,(r4+0)
	servo0->servo_T1 = a;
 934:	78 02 00 00 	mvhi r2,0x0
 938:	38 42 0a e4 	ori r2,r2,0xae4
	unsigned int g = b + 100000;
	servo0->servo_D0 = g;
}
void servo_set_T1(unsigned int c)
{       
	unsigned int a = 100000*c;
 93c:	88 23 08 00 	mul r1,r1,r3
	servo0->servo_T1 = a;
 940:	28 42 00 00 	lw r2,(r2+0)
 944:	58 41 00 08 	sw (r2+8),r1
}
 948:	c3 a0 00 00 	ret

0000094c <servo_set_D1>:


void servo_set_D1(unsigned int c)
{
	unsigned int tmp = (c * 10000);
 94c:	08 21 27 10 	muli r1,r1,10000
	unsigned int b = (tmp/18);
	unsigned int g = b + 100000;
 950:	78 04 00 00 	mvhi r4,0x0


void servo_set_D1(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
 954:	34 03 00 12 	mvi r3,18
	unsigned int g = b + 100000;
	servo0->servo_D1 = g;
 958:	78 02 00 00 	mvhi r2,0x0

void servo_set_D1(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
	unsigned int g = b + 100000;
 95c:	38 84 0a e0 	ori r4,r4,0xae0


void servo_set_D1(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
 960:	8c 23 08 00 	divu r1,r1,r3
	unsigned int g = b + 100000;
	servo0->servo_D1 = g;
 964:	38 42 0a e4 	ori r2,r2,0xae4

void servo_set_D1(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
	unsigned int g = b + 100000;
 968:	28 83 00 00 	lw r3,(r4+0)
	servo0->servo_D1 = g;
 96c:	28 42 00 00 	lw r2,(r2+0)

void servo_set_D1(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
	unsigned int g = b + 100000;
 970:	b4 23 08 00 	add r1,r1,r3
	servo0->servo_D1 = g;
 974:	58 41 00 0c 	sw (r2+12),r1
}
 978:	c3 a0 00 00 	ret

0000097c <spi_start>:
 */
//These are the specific funtions for the rc522 rfid reader card

void spi_start()
{
	spi0->ucr=0x1;
 97c:	78 01 00 00 	mvhi r1,0x0
 980:	38 21 0a f4 	ori r1,r1,0xaf4
 984:	28 21 00 00 	lw r1,(r1+0)
 988:	34 02 00 01 	mvi r2,1
 98c:	58 22 00 00 	sw (r1+0),r2
	spi0->ucr=0x0;
 990:	58 20 00 00 	sw (r1+0),r0
}
 994:	c3 a0 00 00 	ret

00000998 <spi_read>:
unsigned char spi_read (char reg)
{
	//reg= reg<<1;
	uint32_t regAddress = (0x80 | (reg & 0x7E));
	regAddress = regAddress << 8;
 998:	78 02 00 00 	mvhi r2,0x0
	spi0->ucr=0x0;
}
unsigned char spi_read (char reg)
{
	//reg= reg<<1;
	uint32_t regAddress = (0x80 | (reg & 0x7E));
 99c:	20 21 00 7e 	andi r1,r1,0x7e
	regAddress = regAddress << 8;
 9a0:	38 42 0a f4 	ori r2,r2,0xaf4
	spi0->ucr=0x0;
}
unsigned char spi_read (char reg)
{
	//reg= reg<<1;
	uint32_t regAddress = (0x80 | (reg & 0x7E));
 9a4:	38 23 00 80 	ori r3,r1,0x80
	regAddress = regAddress << 8;
 9a8:	28 41 00 00 	lw r1,(r2+0)
 9ac:	3c 63 00 08 	sli r3,r3,8
	while(spi0->ucr & SPI_BUSY);
 9b0:	28 22 00 00 	lw r2,(r1+0)
 9b4:	20 42 00 02 	andi r2,r2,0x2
 9b8:	5c 40 ff fe 	bne r2,r0,9b0 <spi_read+0x18>
	spi0->data_in= regAddress;
 9bc:	58 23 00 04 	sw (r1+4),r3
 */
//These are the specific funtions for the rc522 rfid reader card

void spi_start()
{
	spi0->ucr=0x1;
 9c0:	34 02 00 01 	mvi r2,1
 9c4:	58 22 00 00 	sw (r1+0),r2
	spi0->ucr=0x0;
 9c8:	58 20 00 00 	sw (r1+0),r0
	uint32_t regAddress = (0x80 | (reg & 0x7E));
	regAddress = regAddress << 8;
	while(spi0->ucr & SPI_BUSY);
	spi0->data_in= regAddress;
	spi_start();
	while(spi0->ucr & SPI_BUSY);
 9cc:	28 22 00 00 	lw r2,(r1+0)
 9d0:	20 42 00 02 	andi r2,r2,0x2
 9d4:	5c 40 ff fe 	bne r2,r0,9cc <spi_read+0x34>
	
	return spi0->data_out;	
 9d8:	28 21 00 08 	lw r1,(r1+8)
}
 9dc:	20 21 00 ff 	andi r1,r1,0xff
 9e0:	c3 a0 00 00 	ret

000009e4 <spi_write>:
void spi_write (char reg, char value)
{
	//reg=reg<<1;
	uint32_t regAddress=(reg & 0x7E);
 9e4:	20 21 00 7e 	andi r1,r1,0x7e
	regAddress = regAddress << 8;
 9e8:	3c 24 00 08 	sli r4,r1,8
	uint32_t data0 = regAddress | value;
 9ec:	78 03 00 00 	mvhi r3,0x0
 9f0:	38 63 0a f4 	ori r3,r3,0xaf4
	while(spi0->ucr & SPI_BUSY);
	
	return spi0->data_out;	
}
void spi_write (char reg, char value)
{
 9f4:	20 42 00 ff 	andi r2,r2,0xff
	//reg=reg<<1;
	uint32_t regAddress=(reg & 0x7E);
	regAddress = regAddress << 8;
	uint32_t data0 = regAddress | value;
 9f8:	28 61 00 00 	lw r1,(r3+0)
 9fc:	b8 82 18 00 	or r3,r4,r2
	while(spi0->ucr & SPI_BUSY);
 a00:	28 22 00 00 	lw r2,(r1+0)
 a04:	20 42 00 02 	andi r2,r2,0x2
 a08:	5c 40 ff fe 	bne r2,r0,a00 <spi_write+0x1c>
	spi0->data_in=data0;
 a0c:	58 23 00 04 	sw (r1+4),r3
 */
//These are the specific funtions for the rc522 rfid reader card

void spi_start()
{
	spi0->ucr=0x1;
 a10:	34 02 00 01 	mvi r2,1
 a14:	58 22 00 00 	sw (r1+0),r2
	spi0->ucr=0x0;
 a18:	58 20 00 00 	sw (r1+0),r0
	regAddress = regAddress << 8;
	uint32_t data0 = regAddress | value;
	while(spi0->ucr & SPI_BUSY);
	spi0->data_in=data0;
	spi_start();
}
 a1c:	c3 a0 00 00 	ret
