
image:     formato del fichero elf32-lm32

Secciones:
Ind Nombre        Tamaño    VMA       LMA       Desp fich Alin
  0 .text         00000af8  00000000  00000000  00000054  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  1 .rodata       000000dc  00000af8  00000af8  00000b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000014  00000bd4  00000bd4  00000c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000084  00000be8  00000be8  00000c3c  2**2
                  ALLOC
  4 .debug_abbrev 0000034d  00000000  00000000  00000c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ba  00000000  00000000  00000f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000a3d  00000000  00000000  00001943  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000230  00000000  00000000  00002380  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000055b  00000000  00000000  000025b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00000260  00000000  00000000  00002b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 00000077  00000000  00000000  00002d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000040  00000000  00000000  00002de2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    0000030d  00000000  00000000  00002e22  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000011  00000000  00000000  0000312f  2**0
                  CONTENTS, READONLY
 14 .debug_ranges 00000018  00000000  00000000  00003140  2**0
                  CONTENTS, READONLY, DEBUGGING

Desensamblado de la sección .text:

00000000 <_ftext>:
   0:	98 00 00 00 	xor r0,r0,r0
   4:	d0 00 00 00 	wcsr IE,r0
   8:	78 01 00 00 	mvhi r1,0x0
   c:	38 21 00 00 	ori r1,r1,0x0
  10:	d0 e1 00 00 	wcsr EBA,r1
  14:	f8 00 00 3b 	calli 100 <_crt0>
  18:	34 00 00 00 	nop
  1c:	34 00 00 00 	nop

00000020 <_breakpoint_handler>:
  20:	34 00 00 00 	nop
  24:	34 00 00 00 	nop
  28:	34 00 00 00 	nop
  2c:	34 00 00 00 	nop
  30:	34 00 00 00 	nop
  34:	34 00 00 00 	nop
  38:	34 00 00 00 	nop
  3c:	34 00 00 00 	nop

00000040 <_ibuserror_handler>:
  40:	34 00 00 00 	nop
  44:	34 00 00 00 	nop
  48:	34 00 00 00 	nop
  4c:	34 00 00 00 	nop
  50:	34 00 00 00 	nop
  54:	34 00 00 00 	nop
  58:	34 00 00 00 	nop
  5c:	34 00 00 00 	nop

00000060 <_watchpoint_handler>:
  60:	34 00 00 00 	nop
  64:	34 00 00 00 	nop
  68:	34 00 00 00 	nop
  6c:	34 00 00 00 	nop
  70:	34 00 00 00 	nop
  74:	34 00 00 00 	nop
  78:	34 00 00 00 	nop
  7c:	34 00 00 00 	nop

00000080 <_dbuserror_handler>:
  80:	34 00 00 00 	nop
  84:	34 00 00 00 	nop
  88:	34 00 00 00 	nop
  8c:	34 00 00 00 	nop
  90:	34 00 00 00 	nop
  94:	34 00 00 00 	nop
  98:	34 00 00 00 	nop
  9c:	34 00 00 00 	nop

000000a0 <_divzero_handler>:
  a0:	34 00 00 00 	nop
  a4:	34 00 00 00 	nop
  a8:	34 00 00 00 	nop
  ac:	34 00 00 00 	nop
  b0:	34 00 00 00 	nop
  b4:	34 00 00 00 	nop
  b8:	34 00 00 00 	nop
  bc:	34 00 00 00 	nop

000000c0 <_interrupt_handler>:
  c0:	5b 9d 00 00 	sw (sp+0),ra
  c4:	f8 00 00 2b 	calli 170 <_save_all>
  c8:	90 40 08 00 	rcsr r1,IP
  cc:	f8 00 01 92 	calli 714 <irq_handler>
  d0:	78 01 ff ff 	mvhi r1,0xffff
  d4:	38 21 ff ff 	ori r1,r1,0xffff
  d8:	d0 41 00 00 	wcsr IP,r1
  dc:	e0 00 00 38 	bi 1bc <_restore_all_and_eret>

000000e0 <_scall_handler>:
  e0:	34 00 00 00 	nop
  e4:	34 00 00 00 	nop
  e8:	34 00 00 00 	nop
  ec:	34 00 00 00 	nop
  f0:	34 00 00 00 	nop
  f4:	34 00 00 00 	nop
  f8:	34 00 00 00 	nop
  fc:	34 00 00 00 	nop

00000100 <_crt0>:
 100:	78 1c 00 00 	mvhi sp,0x0
 104:	3b 9c 0f fc 	ori sp,sp,0xffc
 108:	78 1a 00 00 	mvhi gp,0x0
 10c:	3b 5a 0b f0 	ori gp,gp,0xbf0
 110:	78 01 00 00 	mvhi r1,0x0
 114:	38 21 0b e8 	ori r1,r1,0xbe8
 118:	78 03 00 00 	mvhi r3,0x0
 11c:	38 63 0c 6c 	ori r3,r3,0xc6c

00000120 <.clearBSS>:
 120:	44 23 00 04 	be r1,r3,130 <.callMain>
 124:	58 20 00 00 	sw (r1+0),r0
 128:	34 21 00 04 	addi r1,r1,4
 12c:	e3 ff ff fd 	bi 120 <.clearBSS>

00000130 <.callMain>:
 130:	34 01 00 00 	mvi r1,0
 134:	34 02 00 00 	mvi r2,0
 138:	34 03 00 00 	mvi r3,0
 13c:	f8 00 01 4f 	calli 678 <main>

00000140 <irq_enable>:
 140:	34 01 00 01 	mvi r1,1
 144:	d0 01 00 00 	wcsr IE,r1
 148:	c3 a0 00 00 	ret

0000014c <irq_disable>:
 14c:	34 01 00 00 	mvi r1,0
 150:	d0 01 00 00 	wcsr IE,r1
 154:	c3 a0 00 00 	ret

00000158 <irq_set_mask>:
 158:	d0 21 00 00 	wcsr IM,r1
 15c:	c3 a0 00 00 	ret

00000160 <irq_get_mask>:
 160:	90 20 08 00 	rcsr r1,IM
 164:	c3 a0 00 00 	ret

00000168 <jump>:
 168:	c0 20 00 00 	b r1

0000016c <halt>:
 16c:	e0 00 00 00 	bi 16c <halt>

00000170 <_save_all>:
 170:	37 9c ff 80 	addi sp,sp,-128
 174:	5b 81 00 04 	sw (sp+4),r1
 178:	5b 82 00 08 	sw (sp+8),r2
 17c:	5b 83 00 0c 	sw (sp+12),r3
 180:	5b 84 00 10 	sw (sp+16),r4
 184:	5b 85 00 14 	sw (sp+20),r5
 188:	5b 86 00 18 	sw (sp+24),r6
 18c:	5b 87 00 1c 	sw (sp+28),r7
 190:	5b 88 00 20 	sw (sp+32),r8
 194:	5b 89 00 24 	sw (sp+36),r9
 198:	5b 8a 00 28 	sw (sp+40),r10
 19c:	5b 9e 00 78 	sw (sp+120),ea
 1a0:	5b 9f 00 7c 	sw (sp+124),ba
 1a4:	2b 81 00 80 	lw r1,(sp+128)
 1a8:	5b 81 00 74 	sw (sp+116),r1
 1ac:	bb 80 08 00 	mv r1,sp
 1b0:	34 21 00 80 	addi r1,r1,128
 1b4:	5b 81 00 70 	sw (sp+112),r1
 1b8:	c3 a0 00 00 	ret

000001bc <_restore_all_and_eret>:
 1bc:	2b 81 00 04 	lw r1,(sp+4)
 1c0:	2b 82 00 08 	lw r2,(sp+8)
 1c4:	2b 83 00 0c 	lw r3,(sp+12)
 1c8:	2b 84 00 10 	lw r4,(sp+16)
 1cc:	2b 85 00 14 	lw r5,(sp+20)
 1d0:	2b 86 00 18 	lw r6,(sp+24)
 1d4:	2b 87 00 1c 	lw r7,(sp+28)
 1d8:	2b 88 00 20 	lw r8,(sp+32)
 1dc:	2b 89 00 24 	lw r9,(sp+36)
 1e0:	2b 8a 00 28 	lw r10,(sp+40)
 1e4:	2b 9d 00 74 	lw ra,(sp+116)
 1e8:	2b 9e 00 78 	lw ea,(sp+120)
 1ec:	2b 9f 00 7c 	lw ba,(sp+124)
 1f0:	2b 9c 00 70 	lw sp,(sp+112)
 1f4:	c3 c0 00 00 	eret

000001f8 <get_sp>:
 1f8:	bb 80 08 00 	mv r1,sp
 1fc:	c3 a0 00 00 	ret

00000200 <get_gp>:
 200:	bb 40 08 00 	mv r1,gp
 204:	c3 a0 00 00 	ret

00000208 <setBit>:
#define    TReloadRegL      0x2D << 1
#define    TCounterValueRegH    0x2E << 1  // shows the 16-bit timer value
#define    TCounterValueRegL    0x2F << 1

void setBit(char reg, char mask)
{
 208:	37 9c ff f4 	addi sp,sp,-12
 20c:	5b 8b 00 0c 	sw (sp+12),r11
 210:	5b 8c 00 08 	sw (sp+8),r12
 214:	5b 9d 00 04 	sw (sp+4),ra
 218:	20 2b 00 ff 	andi r11,r1,0xff
	char tmp;
	tmp = spi_read(reg);
 21c:	b9 60 08 00 	mv r1,r11
#define    TReloadRegL      0x2D << 1
#define    TCounterValueRegH    0x2E << 1  // shows the 16-bit timer value
#define    TCounterValueRegL    0x2F << 1

void setBit(char reg, char mask)
{
 220:	20 4c 00 ff 	andi r12,r2,0xff
	char tmp;
	tmp = spi_read(reg);
 224:	f8 00 02 13 	calli a70 <spi_read>
	spi_write(reg, tmp | mask);   
 228:	b8 2c 10 00 	or r2,r1,r12
 22c:	20 42 00 ff 	andi r2,r2,0xff
 230:	b9 60 08 00 	mv r1,r11
 234:	f8 00 02 22 	calli abc <spi_write>
}
 238:	2b 9d 00 04 	lw ra,(sp+4)
 23c:	2b 8b 00 0c 	lw r11,(sp+12)
 240:	2b 8c 00 08 	lw r12,(sp+8)
 244:	37 9c 00 0c 	addi sp,sp,12
 248:	c3 a0 00 00 	ret

0000024c <clearBit>:
void clearBit(char reg, char mask)
{
 24c:	37 9c ff f4 	addi sp,sp,-12
 250:	5b 8b 00 0c 	sw (sp+12),r11
 254:	5b 8c 00 08 	sw (sp+8),r12
 258:	5b 9d 00 04 	sw (sp+4),ra
 25c:	20 2b 00 ff 	andi r11,r1,0xff
	char tmp;
	tmp = spi_read(reg);
 260:	b9 60 08 00 	mv r1,r11
	char tmp;
	tmp = spi_read(reg);
	spi_write(reg, tmp | mask);   
}
void clearBit(char reg, char mask)
{
 264:	20 4c 00 ff 	andi r12,r2,0xff
	char tmp;
	tmp = spi_read(reg);
 268:	f8 00 02 02 	calli a70 <spi_read>
	spi_write(reg, tmp & (~mask));
 26c:	a5 80 10 00 	not r2,r12
 270:	a0 22 08 00 	and r1,r1,r2
 274:	20 22 00 ff 	andi r2,r1,0xff
 278:	b9 60 08 00 	mv r1,r11
 27c:	f8 00 02 10 	calli abc <spi_write>
}
 280:	2b 9d 00 04 	lw ra,(sp+4)
 284:	2b 8b 00 0c 	lw r11,(sp+12)
 288:	2b 8c 00 08 	lw r12,(sp+8)
 28c:	37 9c 00 0c 	addi sp,sp,12
 290:	c3 a0 00 00 	ret

00000294 <initRfidReader>:

void initRfidReader()
{
 294:	37 9c ff fc 	addi sp,sp,-4
 298:	5b 9d 00 04 	sw (sp+4),ra
	//Make Soft Reset
	spi_write(CommandReg, PCD_RESETPHASE);
 29c:	34 01 00 02 	mvi r1,2
 2a0:	34 02 00 0f 	mvi r2,15
 2a4:	f8 00 02 06 	calli abc <spi_write>
	while (spi_read(CommandReg) & (1<<4));
 2a8:	34 01 00 02 	mvi r1,2
 2ac:	f8 00 01 f1 	calli a70 <spi_read>
 2b0:	20 21 00 10 	andi r1,r1,0x10
 2b4:	5c 20 ff fd 	bne r1,r0,2a8 <initRfidReader+0x14>
    //Wait until the PCD finish reseting
	

	spi_write(TModeReg, 0x8D );      //Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 2b8:	34 01 00 54 	mvi r1,84
 2bc:	34 02 00 8d 	mvi r2,141
 2c0:	f8 00 01 ff 	calli abc <spi_write>
	spi_write( TPrescalerReg, 0x3E );//TModeReg[3..0] + TPrescalerReg
 2c4:	34 01 00 56 	mvi r1,86
 2c8:	34 02 00 3e 	mvi r2,62
 2cc:	f8 00 01 fc 	calli abc <spi_write>
	spi_write( TReloadRegL, 0x30 );           
 2d0:	34 01 00 5a 	mvi r1,90
 2d4:	34 02 00 30 	mvi r2,48
 2d8:	f8 00 01 f9 	calli abc <spi_write>
	spi_write( TReloadRegH, 0x0 );   //WWWWWWWWWARNING: colocar ambo ceros o revisar que hace el registro
 2dc:	34 01 00 58 	mvi r1,88
 2e0:	34 02 00 00 	mvi r2,0
 2e4:	f8 00 01 f6 	calli abc <spi_write>
	spi_write( TxAutoReg, 0x40 );    //100%ASK
 2e8:	34 01 00 2a 	mvi r1,42
 2ec:	34 02 00 40 	mvi r2,64
 2f0:	f8 00 01 f3 	calli abc <spi_write>
	spi_write( ModeReg, 0x3D );
 2f4:	34 01 00 22 	mvi r1,34
 2f8:	34 02 00 3d 	mvi r2,61
 2fc:	f8 00 01 f0 	calli abc <spi_write>

	//AntennaON
	setBit( TxControlReg, 0x03 );
 300:	34 01 00 28 	mvi r1,40
 304:	34 02 00 03 	mvi r2,3
 308:	fb ff ff c0 	calli 208 <setBit>
	
	//FINISH INIT 
}
 30c:	2b 9d 00 04 	lw ra,(sp+4)
 310:	37 9c 00 04 	addi sp,sp,4
 314:	c3 a0 00 00 	ret

00000318 <loop>:

void loop()
{
 318:	37 9c ff e0 	addi sp,sp,-32
 31c:	5b 8b 00 20 	sw (sp+32),r11
 320:	5b 8c 00 1c 	sw (sp+28),r12
 324:	5b 8d 00 18 	sw (sp+24),r13
 328:	5b 8e 00 14 	sw (sp+20),r14
 32c:	5b 8f 00 10 	sw (sp+16),r15
 330:	5b 90 00 0c 	sw (sp+12),r16
 334:	5b 91 00 08 	sw (sp+8),r17
 338:	5b 9d 00 04 	sw (sp+4),ra
	//Begin Testing
	uart_putstr("Iniciando prueba....");
 33c:	78 01 00 00 	mvhi r1,0x0
 340:	38 21 0a f8 	ori r1,r1,0xaf8
	uart_putstr("\n\r");
 344:	78 0b 00 00 	mvhi r11,0x0
}

void loop()
{
	//Begin Testing
	uart_putstr("Iniciando prueba....");
 348:	f8 00 01 60 	calli 8c8 <uart_putstr>
	uart_putstr("\n\r");
 34c:	39 6b 0b 10 	ori r11,r11,0xb10
 350:	b9 60 08 00 	mv r1,r11
 354:	f8 00 01 5d 	calli 8c8 <uart_putstr>
	msleep(3000);
 358:	34 01 0b b8 	mvi r1,3000
 35c:	f8 00 01 1e 	calli 7d4 <msleep>
	

	//IS_CARD
	//REQUEST

	spi_write( BitFramingReg, 0x07 );
 360:	34 01 00 1a 	mvi r1,26
 364:	34 02 00 07 	mvi r2,7
 368:	f8 00 01 d5 	calli abc <spi_write>

	//TO_CARD
	char irqEn = 0x77;
	//Serial.println(irqEn, HEX);
	spi_write( ComIEnReg, irqEn | 0x80 );
 36c:	34 01 00 04 	mvi r1,4
 370:	34 02 00 f7 	mvi r2,247
 374:	f8 00 01 d2 	calli abc <spi_write>
	clearBit( ComIrqReg, 0x80 );
 378:	34 01 00 08 	mvi r1,8
 37c:	34 02 00 80 	mvi r2,128
 380:	fb ff ff b3 	calli 24c <clearBit>
	setBit( FIFOLevelReg, 0x80 );
 384:	34 01 00 14 	mvi r1,20
 388:	34 02 00 80 	mvi r2,128
 38c:	fb ff ff 9f 	calli 208 <setBit>
	spi_write( CommandReg, PCD_IDLE );
 390:	34 01 00 02 	mvi r1,2
 394:	34 02 00 00 	mvi r2,0
 398:	f8 00 01 c9 	calli abc <spi_write>
	spi_write( FIFODataReg, 0x26 );   //Escribiendo
 39c:	34 01 00 12 	mvi r1,18
 3a0:	34 02 00 26 	mvi r2,38
 3a4:	f8 00 01 c6 	calli abc <spi_write>
	spi_write( CommandReg, PCD_TRANSCEIVE );
 3a8:	34 01 00 02 	mvi r1,2
 3ac:	34 02 00 0c 	mvi r2,12
 3b0:	f8 00 01 c3 	calli abc <spi_write>
	setBit( BitFramingReg, 0x80 );
 3b4:	34 01 00 1a 	mvi r1,26
 3b8:	34 02 00 80 	mvi r2,128
 3bc:	fb ff ff 93 	calli 208 <setBit>

	char flag = 1;
	while(flag)
	{
		//Serial.println("Entro a verificar");
		n =spi_read( ComIrqReg );
 3c0:	34 01 00 08 	mvi r1,8
 3c4:	f8 00 01 ab 	calli a70 <spi_read>
 3c8:	b8 20 68 00 	mv r13,r1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
 3cc:	21 ac 00 01 	andi r12,r13,0x1
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
 3d0:	34 01 00 01 	mvi r1,1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
 3d4:	5d 80 00 0a 	bne r12,r0,3fc <loop+0xe4>
	char n;
	char waitIrq = 0x30;


	char flag = 1;
	while(flag)
 3d8:	21 ad 00 30 	andi r13,r13,0x30
		if(n & 0x01)
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
 3dc:	f8 00 00 fe 	calli 7d4 <msleep>
	char n;
	char waitIrq = 0x30;


	char flag = 1;
	while(flag)
 3e0:	5d ac 00 09 	bne r13,r12,404 <loop+0xec>
	{
		//Serial.println("Entro a verificar");
		n =spi_read( ComIrqReg );
 3e4:	34 01 00 08 	mvi r1,8
 3e8:	f8 00 01 a2 	calli a70 <spi_read>
 3ec:	b8 20 68 00 	mv r13,r1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
 3f0:	21 ac 00 01 	andi r12,r13,0x1
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
 3f4:	34 01 00 01 	mvi r1,1
		if(n & waitIrq)
		{
			//Serial.println("ha cambiado algo");
			flag = 0;
		}
		if(n & 0x01)
 3f8:	45 80 ff f8 	be r12,r0,3d8 <loop+0xc0>
		{
			//Serial.println("TIMEOUT, nada en 25ms");
			flag=0;
		}
		msleep(1);
 3fc:	34 01 00 01 	mvi r1,1
 400:	f8 00 00 f5 	calli 7d4 <msleep>
		
	}
	
	flag=1;

	clearBit ( BitFramingReg, 0x80 );
 404:	34 02 00 80 	mvi r2,128
 408:	34 01 00 1a 	mvi r1,26
 40c:	fb ff ff 90 	calli 24c <clearBit>
	char lec;
	lec = spi_read( ErrorReg);
 410:	34 01 00 0c 	mvi r1,12
 414:	f8 00 01 97 	calli a70 <spi_read>
		//Serial.println("status=MI_OK, todo va bien");
		if ( n & irqEn & 0x01 )     // WARNING: Parece ser otra lectura de un posible error, pero pues
			//Serial.println("status=NOTAGERR, NO todo va bien");
	}*/
	
	n = spi_read(FIFOLevelReg); //leer cantidad de datos
 418:	34 01 00 14 	mvi r1,20
 41c:	f8 00 01 95 	calli a70 <spi_read>
 420:	b8 20 80 00 	mv r16,r1
	
	uart_putstr("la cantidad de datos en el primer ciclo,n a leer es:  ");
 424:	78 01 00 00 	mvhi r1,0x0
 428:	38 21 0b 14 	ori r1,r1,0xb14
 42c:	f8 00 01 27 	calli 8c8 <uart_putstr>
	uart_putchar(n+48);
 430:	36 01 00 30 	addi r1,r16,48
 434:	20 21 00 ff 	andi r1,r1,0xff
 438:	f8 00 01 1b 	calli 8a4 <uart_putchar>
	uart_putstr("\n\r");
 43c:	b9 60 08 00 	mv r1,r11
	uart_putstr("-------");
 440:	78 11 00 00 	mvhi r17,0x0
	
	n = spi_read(FIFOLevelReg); //leer cantidad de datos
	
	uart_putstr("la cantidad de datos en el primer ciclo,n a leer es:  ");
	uart_putchar(n+48);
	uart_putstr("\n\r");
 444:	f8 00 01 21 	calli 8c8 <uart_putstr>
	uart_putstr("-------");
 448:	3a 31 0b 4c 	ori r17,r17,0xb4c
 44c:	ba 20 08 00 	mv r1,r17
 450:	f8 00 01 1e 	calli 8c8 <uart_putstr>
	uart_putstr("\n\r");
 454:	b9 60 08 00 	mv r1,r11
 458:	f8 00 01 1c 	calli 8c8 <uart_putstr>
	
	char i=0;
	
	while (i<n)
 45c:	46 00 00 1e 	be r16,r0,4d4 <loop+0x1bc>
 460:	78 0c 00 00 	mvhi r12,0x0
 464:	34 0d 00 00 	mvi r13,0
 468:	39 8c 0b 54 	ori r12,r12,0xb54
	{
		lec = spi_read(FIFODataReg);
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
		if (firstDigit <= 9) 
 46c:	34 0f 00 09 	mvi r15,9
	
	char i=0;
	
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
 470:	34 01 00 12 	mvi r1,18
 474:	f8 00 01 7f 	calli a70 <spi_read>
 478:	b8 20 70 00 	mv r14,r1
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
 47c:	b9 80 08 00 	mv r1,r12
 480:	f8 00 01 12 	calli 8c8 <uart_putstr>
		if (firstDigit <= 9) 
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
 484:	01 c2 00 04 	srui r2,r14,4
	
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
 488:	21 c3 00 0f 	andi r3,r14,0xf
		if (firstDigit <= 9) 
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
 48c:	20 42 00 ff 	andi r2,r2,0xff
		if (secondDigit <= 9) 
			secondDigit=secondDigit+48;
		else
			secondDigit=secondDigit+55;
 490:	34 44 00 37 	addi r4,r2,55
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
		if (secondDigit <= 9) 
			secondDigit=secondDigit+48;
 494:	34 45 00 30 	addi r5,r2,48
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
		if (firstDigit <= 9) 
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
 498:	34 6e 00 37 	addi r14,r3,55
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
		if (firstDigit <= 9) 
 49c:	54 6f 00 02 	bgu r3,r15,4a4 <loop+0x18c>
			firstDigit=firstDigit+48;
 4a0:	34 6e 00 30 	addi r14,r3,48
		
		char secondDigit = (lec & 0xf0)>>4;
		if (secondDigit <= 9) 
			secondDigit=secondDigit+48;
		else
			secondDigit=secondDigit+55;
 4a4:	20 83 00 ff 	andi r3,r4,0xff
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
		if (secondDigit <= 9) 
 4a8:	54 4f 00 02 	bgu r2,r15,4b0 <loop+0x198>
			secondDigit=secondDigit+48;
 4ac:	20 a3 00 ff 	andi r3,r5,0xff
		else
			secondDigit=secondDigit+55;

		uart_putchar(secondDigit);
 4b0:	b8 60 08 00 	mv r1,r3
 4b4:	f8 00 00 fc 	calli 8a4 <uart_putchar>
		uart_putchar(firstDigit);
 4b8:	b9 c0 08 00 	mv r1,r14
 4bc:	f8 00 00 fa 	calli 8a4 <uart_putchar>
		uart_putstr("\n\r");
		
		i=i+1;
 4c0:	35 ad 00 01 	addi r13,r13,1
		else
			secondDigit=secondDigit+55;

		uart_putchar(secondDigit);
		uart_putchar(firstDigit);
		uart_putstr("\n\r");
 4c4:	b9 60 08 00 	mv r1,r11
		
		i=i+1;
 4c8:	21 ad 00 ff 	andi r13,r13,0xff
		else
			secondDigit=secondDigit+55;

		uart_putchar(secondDigit);
		uart_putchar(firstDigit);
		uart_putstr("\n\r");
 4cc:	f8 00 00 ff 	calli 8c8 <uart_putstr>
	uart_putstr("-------");
	uart_putstr("\n\r");
	
	char i=0;
	
	while (i<n)
 4d0:	56 0d ff e8 	bgu r16,r13,470 <loop+0x158>
	//FIN IS_CARD

	//READ_CARD_SERIAL

	//ANTICOLL
	spi_write( BitFramingReg, 0x00 );
 4d4:	34 01 00 1a 	mvi r1,26
 4d8:	34 02 00 00 	mvi r2,0
 4dc:	f8 00 01 78 	calli abc <spi_write>
	clearBit( Status2Reg, 0x08 );     //WARGNING: no presente en anterior ejemplo del cuaderno, tal vez puede ser omitido
 4e0:	34 01 00 10 	mvi r1,16
 4e4:	34 02 00 08 	mvi r2,8
 4e8:	fb ff ff 59 	calli 24c <clearBit>
	
	
	//TO_CARD

	spi_write( ComIEnReg, irqEn | 0x80 );
 4ec:	34 01 00 04 	mvi r1,4
 4f0:	34 02 00 f7 	mvi r2,247
 4f4:	f8 00 01 72 	calli abc <spi_write>
	clearBit( ComIrqReg, 0x80 );
 4f8:	34 01 00 08 	mvi r1,8
 4fc:	34 02 00 80 	mvi r2,128
 500:	fb ff ff 53 	calli 24c <clearBit>
	setBit( FIFOLevelReg, 0x80 );
 504:	34 01 00 14 	mvi r1,20
 508:	34 02 00 80 	mvi r2,128
 50c:	fb ff ff 3f 	calli 208 <setBit>
	spi_write( CommandReg, PCD_IDLE );
 510:	34 01 00 02 	mvi r1,2
 514:	34 02 00 00 	mvi r2,0
 518:	f8 00 01 69 	calli abc <spi_write>
	spi_write( FIFODataReg, 0x93 ); //EScribiendo PICC_ANTICOLL
 51c:	34 01 00 12 	mvi r1,18
 520:	34 02 00 93 	mvi r2,147
 524:	f8 00 01 66 	calli abc <spi_write>
	spi_write( FIFODataReg, 0x20 ); //EScribiendo NVB
 528:	34 01 00 12 	mvi r1,18
 52c:	34 02 00 20 	mvi r2,32
 530:	f8 00 01 63 	calli abc <spi_write>
	spi_write( CommandReg, PCD_TRANSCEIVE );
 534:	34 01 00 02 	mvi r1,2
 538:	34 02 00 0c 	mvi r2,12
 53c:	f8 00 01 60 	calli abc <spi_write>
	setBit( BitFramingReg, 0x80 );
 540:	34 01 00 1a 	mvi r1,26
 544:	34 02 00 80 	mvi r2,128
 548:	fb ff ff 30 	calli 208 <setBit>
	
	while(flag)
	{
		//Serial.println("Entro a verificar");
		n =spi_read( ComIrqReg );
 54c:	34 01 00 08 	mvi r1,8
 550:	f8 00 01 48 	calli a70 <spi_read>
 554:	b8 20 68 00 	mv r13,r1
		if(n & waitIrq){
		//Serial.println("ha cambiado algo");
		flag = 0;
		}
		if(n & 0x01){
 558:	21 ac 00 01 	andi r12,r13,0x1
		//Serial.println("TIMEOUT, nada en 25ms");
		flag=0;
		}

		msleep(1);
 55c:	34 01 00 01 	mvi r1,1
		n =spi_read( ComIrqReg );
		if(n & waitIrq){
		//Serial.println("ha cambiado algo");
		flag = 0;
		}
		if(n & 0x01){
 560:	5d 80 00 0a 	bne r12,r0,588 <loop+0x270>
	spi_write( FIFODataReg, 0x93 ); //EScribiendo PICC_ANTICOLL
	spi_write( FIFODataReg, 0x20 ); //EScribiendo NVB
	spi_write( CommandReg, PCD_TRANSCEIVE );
	setBit( BitFramingReg, 0x80 );
	
	while(flag)
 564:	21 ad 00 30 	andi r13,r13,0x30
		if(n & 0x01){
		//Serial.println("TIMEOUT, nada en 25ms");
		flag=0;
		}

		msleep(1);
 568:	f8 00 00 9b 	calli 7d4 <msleep>
	spi_write( FIFODataReg, 0x93 ); //EScribiendo PICC_ANTICOLL
	spi_write( FIFODataReg, 0x20 ); //EScribiendo NVB
	spi_write( CommandReg, PCD_TRANSCEIVE );
	setBit( BitFramingReg, 0x80 );
	
	while(flag)
 56c:	5d ac 00 09 	bne r13,r12,590 <loop+0x278>
	{
		//Serial.println("Entro a verificar");
		n =spi_read( ComIrqReg );
 570:	34 01 00 08 	mvi r1,8
 574:	f8 00 01 3f 	calli a70 <spi_read>
 578:	b8 20 68 00 	mv r13,r1
		if(n & waitIrq){
		//Serial.println("ha cambiado algo");
		flag = 0;
		}
		if(n & 0x01){
 57c:	21 ac 00 01 	andi r12,r13,0x1
		//Serial.println("TIMEOUT, nada en 25ms");
		flag=0;
		}

		msleep(1);
 580:	34 01 00 01 	mvi r1,1
		n =spi_read( ComIrqReg );
		if(n & waitIrq){
		//Serial.println("ha cambiado algo");
		flag = 0;
		}
		if(n & 0x01){
 584:	45 80 ff f8 	be r12,r0,564 <loop+0x24c>
		//Serial.println("TIMEOUT, nada en 25ms");
		flag=0;
		}

		msleep(1);
 588:	34 01 00 01 	mvi r1,1
 58c:	f8 00 00 92 	calli 7d4 <msleep>
	}
	
	flag = 1;

	clearBit( BitFramingReg, 0x80 );
 590:	34 02 00 80 	mvi r2,128
 594:	34 01 00 1a 	mvi r1,26
 598:	fb ff ff 2d 	calli 24c <clearBit>

		if ( n & irqEn & 0x01 )// WWWWWWWWARNING: Parece ser otra lectura de un posible error, pero pues
			Serial.println("status=NOTAGERR, NO todo va bien");
	}*/
	
	n = spi_read(FIFOLevelReg); //leer cantidad de datos
 59c:	34 01 00 14 	mvi r1,20
 5a0:	f8 00 01 34 	calli a70 <spi_read>
 5a4:	b8 20 80 00 	mv r16,r1
	
	uart_putstr("la cantidad de datos n a leer es:  ");
 5a8:	78 01 00 00 	mvhi r1,0x0
 5ac:	38 21 0b 80 	ori r1,r1,0xb80
 5b0:	f8 00 00 c6 	calli 8c8 <uart_putstr>
	uart_putchar(n+48);
 5b4:	36 01 00 30 	addi r1,r16,48
 5b8:	20 21 00 ff 	andi r1,r1,0xff
 5bc:	f8 00 00 ba 	calli 8a4 <uart_putchar>
	uart_putstr("\n\r");
 5c0:	b9 60 08 00 	mv r1,r11
 5c4:	f8 00 00 c1 	calli 8c8 <uart_putstr>
	uart_putstr("-------");
 5c8:	ba 20 08 00 	mv r1,r17
 5cc:	f8 00 00 bf 	calli 8c8 <uart_putstr>
	uart_putstr("\n\r");	
 5d0:	b9 60 08 00 	mv r1,r11
 5d4:	f8 00 00 bd 	calli 8c8 <uart_putstr>

	i=0;
	
	while (i<n)
 5d8:	46 00 00 1e 	be r16,r0,650 <loop+0x338>
 5dc:	78 0c 00 00 	mvhi r12,0x0
 5e0:	34 0d 00 00 	mvi r13,0
 5e4:	39 8c 0b 54 	ori r12,r12,0xb54
	{
		lec = spi_read(FIFODataReg);
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
		if (firstDigit <= 9) 
 5e8:	34 0f 00 09 	mvi r15,9

	i=0;
	
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
 5ec:	34 01 00 12 	mvi r1,18
 5f0:	f8 00 01 20 	calli a70 <spi_read>
 5f4:	b8 20 70 00 	mv r14,r1
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
 5f8:	b9 80 08 00 	mv r1,r12
 5fc:	f8 00 00 b3 	calli 8c8 <uart_putstr>
		if (firstDigit <= 9) 
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
 600:	01 c2 00 04 	srui r2,r14,4
	
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
 604:	21 c3 00 0f 	andi r3,r14,0xf
		if (firstDigit <= 9) 
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
 608:	20 42 00 ff 	andi r2,r2,0xff
		if (secondDigit <= 9) 
			secondDigit=secondDigit+48;
		else
			secondDigit=secondDigit+55;
 60c:	34 44 00 37 	addi r4,r2,55
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
		if (secondDigit <= 9) 
			secondDigit=secondDigit+48;
 610:	34 41 00 30 	addi r1,r2,48
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
		if (firstDigit <= 9) 
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
 614:	34 6e 00 37 	addi r14,r3,55
	while (i<n)
	{
		lec = spi_read(FIFODataReg);
		uart_putstr(" Dato leido en el primer ciclo de FIFO: ");
		char firstDigit  = lec & 0x0f;
		if (firstDigit <= 9) 
 618:	54 6f 00 02 	bgu r3,r15,620 <loop+0x308>
			firstDigit=firstDigit+48;
 61c:	34 6e 00 30 	addi r14,r3,48
		
		char secondDigit = (lec & 0xf0)>>4;
		if (secondDigit <= 9) 
			secondDigit=secondDigit+48;
		else
			secondDigit=secondDigit+55;
 620:	20 83 00 ff 	andi r3,r4,0xff
			firstDigit=firstDigit+48;
		else
			firstDigit=firstDigit+55;
		
		char secondDigit = (lec & 0xf0)>>4;
		if (secondDigit <= 9) 
 624:	54 4f 00 02 	bgu r2,r15,62c <loop+0x314>
			secondDigit=secondDigit+48;
 628:	20 23 00 ff 	andi r3,r1,0xff
		else
			secondDigit=secondDigit+55;

		uart_putchar(secondDigit);
 62c:	b8 60 08 00 	mv r1,r3
 630:	f8 00 00 9d 	calli 8a4 <uart_putchar>
		uart_putchar(firstDigit);
 634:	b9 c0 08 00 	mv r1,r14
 638:	f8 00 00 9b 	calli 8a4 <uart_putchar>
		uart_putstr("\n\r");
		
		i=i+1;
 63c:	35 ad 00 01 	addi r13,r13,1
		else
			secondDigit=secondDigit+55;

		uart_putchar(secondDigit);
		uart_putchar(firstDigit);
		uart_putstr("\n\r");
 640:	b9 60 08 00 	mv r1,r11
		
		i=i+1;
 644:	21 ad 00 ff 	andi r13,r13,0xff
		else
			secondDigit=secondDigit+55;

		uart_putchar(secondDigit);
		uart_putchar(firstDigit);
		uart_putstr("\n\r");
 648:	f8 00 00 a0 	calli 8c8 <uart_putstr>
	uart_putstr("-------");
	uart_putstr("\n\r");	

	i=0;
	
	while (i<n)
 64c:	56 0d ff e8 	bgu r16,r13,5ec <loop+0x2d4>
	//byte validBits;
	validBits = Rd(ControlReg) & 0x07; //Ver nro de bits validos
	Serial.print("Bits validos");Serial.print(validBits, BIN);
	Serial.println();
	*/
}
 650:	2b 9d 00 04 	lw ra,(sp+4)
 654:	2b 8b 00 20 	lw r11,(sp+32)
 658:	2b 8c 00 1c 	lw r12,(sp+28)
 65c:	2b 8d 00 18 	lw r13,(sp+24)
 660:	2b 8e 00 14 	lw r14,(sp+20)
 664:	2b 8f 00 10 	lw r15,(sp+16)
 668:	2b 90 00 0c 	lw r16,(sp+12)
 66c:	2b 91 00 08 	lw r17,(sp+8)
 670:	37 9c 00 20 	addi sp,sp,32
 674:	c3 a0 00 00 	ret

00000678 <main>:

int main()
{
 678:	37 9c ff ec 	addi sp,sp,-20
 67c:	5b 8b 00 14 	sw (sp+20),r11
 680:	5b 8c 00 10 	sw (sp+16),r12
 684:	5b 8d 00 0c 	sw (sp+12),r13
 688:	5b 8e 00 08 	sw (sp+8),r14
 68c:	5b 9d 00 04 	sw (sp+4),ra
 690:	78 0e 00 00 	mvhi r14,0x0
 694:	78 0b 00 00 	mvhi r11,0x0
 698:	78 0c 00 00 	mvhi r12,0x0
 69c:	39 ce 0b a4 	ori r14,r14,0xba4
 6a0:	39 6b 0b 10 	ori r11,r11,0xb10
 6a4:	39 8c 0b c0 	ori r12,r12,0xbc0

	while(1)
	{
		initRfidReader();
		n=uart_getchar();
		if(n=='s')
 6a8:	34 0d 00 73 	mvi r13,115
 6ac:	e0 00 00 05 	bi 6c0 <main+0x48>
			uart_putstr("\n\r");
			loop();
		}
		else
		{
			uart_putstr("Invalid command");
 6b0:	b9 80 08 00 	mv r1,r12
 6b4:	f8 00 00 85 	calli 8c8 <uart_putstr>
			uart_putstr("\n\r");
 6b8:	b9 60 08 00 	mv r1,r11
 6bc:	f8 00 00 83 	calli 8c8 <uart_putstr>
	
	char n;	

	while(1)
	{
		initRfidReader();
 6c0:	fb ff fe f5 	calli 294 <initRfidReader>
		n=uart_getchar();
 6c4:	f8 00 00 6f 	calli 880 <uart_getchar>
		if(n=='s')
 6c8:	5c 2d ff fa 	bne r1,r13,6b0 <main+0x38>
		{
			uart_putstr("Valid Command, begin loop");
 6cc:	b9 c0 08 00 	mv r1,r14
 6d0:	f8 00 00 7e 	calli 8c8 <uart_putstr>
			uart_putstr("\n\r");
 6d4:	b9 60 08 00 	mv r1,r11
 6d8:	f8 00 00 7c 	calli 8c8 <uart_putstr>
			loop();
 6dc:	fb ff ff 0f 	calli 318 <loop>
 6e0:	e3 ff ff f8 	bi 6c0 <main+0x48>

000006e4 <isr_null>:
/***************************************************************************
 * IRQ handling
 */
void isr_null()
{
}
 6e4:	c3 a0 00 00 	ret

000006e8 <tic_isr>:

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 6e8:	78 01 00 00 	mvhi r1,0x0
 6ec:	38 21 0c 68 	ori r1,r1,0xc68
 6f0:	28 23 00 00 	lw r3,(r1+0)
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 6f4:	78 02 00 00 	mvhi r2,0x0
 6f8:	38 42 0b e0 	ori r2,r2,0xbe0
 6fc:	28 42 00 00 	lw r2,(r2+0)

uint32_t tic_msec;

void tic_isr()
{
	tic_msec++;
 700:	34 63 00 01 	addi r3,r3,1
 704:	58 23 00 00 	sw (r1+0),r3
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 708:	34 01 00 0e 	mvi r1,14
 70c:	58 41 00 00 	sw (r2+0),r1
}
 710:	c3 a0 00 00 	ret

00000714 <irq_handler>:
void isr_null()
{
}

void irq_handler(uint32_t pending)
{
 714:	37 9c ff f0 	addi sp,sp,-16
 718:	5b 8b 00 10 	sw (sp+16),r11
 71c:	5b 8c 00 0c 	sw (sp+12),r12
 720:	5b 8d 00 08 	sw (sp+8),r13
 724:	5b 9d 00 04 	sw (sp+4),ra
 728:	78 0b 00 00 	mvhi r11,0x0
 72c:	39 6b 0b e8 	ori r11,r11,0xbe8
 730:	b8 20 60 00 	mv r12,r1
 */
void isr_null()
{
}

void irq_handler(uint32_t pending)
 734:	35 6d 00 80 	addi r13,r11,128
 738:	e0 00 00 04 	bi 748 <irq_handler+0x34>
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 73c:	35 6b 00 04 	addi r11,r11,4

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 740:	45 6d 00 08 	be r11,r13,760 <irq_handler+0x4c>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
 744:	01 8c 00 01 	srui r12,r12,1
void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
		if (pending & 0x01) (*isr_table[i])();
 748:	21 81 00 01 	andi r1,r12,0x1
 74c:	44 20 ff fc 	be r1,r0,73c <irq_handler+0x28>
 750:	29 61 00 00 	lw r1,(r11+0)
 754:	35 6b 00 04 	addi r11,r11,4
 758:	d8 20 00 00 	call r1

void irq_handler(uint32_t pending)
{
	int i;

	for(i=0; i<32; i++) {
 75c:	5d 6d ff fa 	bne r11,r13,744 <irq_handler+0x30>
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}
 760:	2b 9d 00 04 	lw ra,(sp+4)
 764:	2b 8b 00 10 	lw r11,(sp+16)
 768:	2b 8c 00 0c 	lw r12,(sp+12)
 76c:	2b 8d 00 08 	lw r13,(sp+8)
 770:	37 9c 00 10 	addi sp,sp,16
 774:	c3 a0 00 00 	ret

00000778 <isr_init>:

void isr_init()
{
 778:	78 01 00 00 	mvhi r1,0x0
 77c:	78 02 00 00 	mvhi r2,0x0
 780:	38 21 0b e8 	ori r1,r1,0xbe8
 784:	38 42 06 e4 	ori r2,r2,0x6e4
		if (pending & 0x01) (*isr_table[i])();
		pending >>= 1;
	}
}

void isr_init()
 788:	34 23 00 80 	addi r3,r1,128
{
	int i;
	for(i=0; i<32; i++)
		isr_table[i] = &isr_null;
 78c:	58 22 00 00 	sw (r1+0),r2
 790:	34 21 00 04 	addi r1,r1,4
}

void isr_init()
{
	int i;
	for(i=0; i<32; i++)
 794:	5c 23 ff fe 	bne r1,r3,78c <isr_init+0x14>
		isr_table[i] = &isr_null;
}
 798:	c3 a0 00 00 	ret

0000079c <isr_register>:

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 79c:	78 03 00 00 	mvhi r3,0x0
 7a0:	3c 21 00 02 	sli r1,r1,2
 7a4:	38 63 0b e8 	ori r3,r3,0xbe8
 7a8:	b4 61 18 00 	add r3,r3,r1
 7ac:	58 62 00 00 	sw (r3+0),r2
}
 7b0:	c3 a0 00 00 	ret

000007b4 <isr_unregister>:

void isr_unregister(int irq)
{
	isr_table[irq] = &isr_null;
 7b4:	78 03 00 00 	mvhi r3,0x0
 7b8:	3c 21 00 02 	sli r1,r1,2
 7bc:	38 63 0b e8 	ori r3,r3,0xbe8
 7c0:	78 02 00 00 	mvhi r2,0x0
 7c4:	b4 61 18 00 	add r3,r3,r1
 7c8:	38 42 06 e4 	ori r2,r2,0x6e4
 7cc:	58 62 00 00 	sw (r3+0),r2
}
 7d0:	c3 a0 00 00 	ret

000007d4 <msleep>:
void msleep(uint32_t msec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000)*msec;
 7d4:	78 02 00 00 	mvhi r2,0x0
 7d8:	38 42 0b e0 	ori r2,r2,0xbe0
 7dc:	38 03 c3 50 	mvu r3,0xc350
 7e0:	28 42 00 00 	lw r2,(r2+0)
 7e4:	88 23 08 00 	mul r1,r1,r3
 7e8:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 7ec:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 7f0:	34 01 00 08 	mvi r1,8
 7f4:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 7f8:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 7fc:	20 21 00 01 	andi r1,r1,0x1
 800:	44 20 ff fe 	be r1,r0,7f8 <msleep+0x24>
}
 804:	c3 a0 00 00 	ret

00000808 <nsleep>:
void nsleep(uint32_t nsec)
{
	uint32_t tcr;

	// Use timer0.1
	timer0->compare1 = (FCPU/1000000)*nsec;
 808:	78 02 00 00 	mvhi r2,0x0
 80c:	38 42 0b e0 	ori r2,r2,0xbe0
 810:	28 42 00 00 	lw r2,(r2+0)
 814:	08 21 00 32 	muli r1,r1,50
 818:	58 41 00 10 	sw (r2+16),r1
	timer0->counter1 = 0;
 81c:	58 40 00 14 	sw (r2+20),r0
	timer0->tcr1 = TIMER_EN;
 820:	34 01 00 08 	mvi r1,8
 824:	58 41 00 0c 	sw (r2+12),r1

	do {
		//halt();
 		tcr = timer0->tcr1;
 828:	28 41 00 0c 	lw r1,(r2+12)
 	} while ( ! (tcr & TIMER_TRIG) );
 82c:	20 21 00 01 	andi r1,r1,0x1
 830:	44 20 ff fe 	be r1,r0,828 <nsleep+0x20>
}
 834:	c3 a0 00 00 	ret

00000838 <tic_init>:
void tic_init()
{
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 838:	78 01 00 00 	mvhi r1,0x0
 83c:	38 21 0b e0 	ori r1,r1,0xbe0
 840:	28 23 00 00 	lw r3,(r1+0)
 844:	34 02 13 88 	mvi r2,5000
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 848:	78 01 00 00 	mvhi r1,0x0

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
 84c:	58 62 00 04 	sw (r3+4),r2
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 850:	38 21 0c 68 	ori r1,r1,0xc68

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
 854:	58 60 00 08 	sw (r3+8),r0
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
}

void tic_init()
{
	tic_msec = 0;
 858:	58 20 00 00 	sw (r1+0),r0
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 85c:	78 02 00 00 	mvhi r2,0x0
 860:	78 01 00 00 	mvhi r1,0x0
	tic_msec = 0;

	// Setup timer0.0
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;
 864:	34 04 00 0e 	mvi r4,14
 868:	58 64 00 00 	sw (r3+0),r4
		isr_table[i] = &isr_null;
}

void isr_register(int irq, isr_ptr_t isr)
{
	isr_table[irq] = isr;
 86c:	38 21 0b e8 	ori r1,r1,0xbe8
 870:	38 42 06 e8 	ori r2,r2,0x6e8
 874:	58 22 00 04 	sw (r1+4),r2
	timer0->compare0 = (FCPU/10000);
	timer0->counter0 = 0;
	timer0->tcr0     = TIMER_EN | TIMER_AR | TIMER_IRQEN;

	isr_register(1, &tic_isr);
}
 878:	c3 a0 00 00 	ret

0000087c <uart_init>:
	//uart0->lcr = 0x03;  // Line Control Register:    8N1
	//uart0->mcr = 0x00;  // Modem Control Register

	// Setup Divisor register (Fclk / Baud)
	//uart0->div = (FCPU/(57600*16));
}
 87c:	c3 a0 00 00 	ret

00000880 <uart_getchar>:

char uart_getchar()
{   
 880:	78 01 00 00 	mvhi r1,0x0
 884:	38 21 0b dc 	ori r1,r1,0xbdc
 888:	28 22 00 00 	lw r2,(r1+0)
	while (! (uart0->ucr & UART_DR)) ;
 88c:	28 41 00 00 	lw r1,(r2+0)
 890:	20 21 00 01 	andi r1,r1,0x1
 894:	44 20 ff fe 	be r1,r0,88c <uart_getchar+0xc>
	return uart0->rxtx;
 898:	28 41 00 04 	lw r1,(r2+4)
}
 89c:	20 21 00 ff 	andi r1,r1,0xff
 8a0:	c3 a0 00 00 	ret

000008a4 <uart_putchar>:

void uart_putchar(char c)
{
 8a4:	78 02 00 00 	mvhi r2,0x0
 8a8:	38 42 0b dc 	ori r2,r2,0xbdc
 8ac:	28 43 00 00 	lw r3,(r2+0)
 8b0:	20 21 00 ff 	andi r1,r1,0xff
	while (uart0->ucr & UART_BUSY) ;
 8b4:	28 62 00 00 	lw r2,(r3+0)
 8b8:	20 42 00 10 	andi r2,r2,0x10
 8bc:	5c 40 ff fe 	bne r2,r0,8b4 <uart_putchar+0x10>
	uart0->rxtx = c;
 8c0:	58 61 00 04 	sw (r3+4),r1
}
 8c4:	c3 a0 00 00 	ret

000008c8 <uart_putstr>:

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 8c8:	40 24 00 00 	lbu r4,(r1+0)
 8cc:	44 80 00 0b 	be r4,r0,8f8 <uart_putstr+0x30>
 8d0:	78 02 00 00 	mvhi r2,0x0
 8d4:	38 42 0b dc 	ori r2,r2,0xbdc
 8d8:	28 43 00 00 	lw r3,(r2+0)
	return uart0->rxtx;
}

void uart_putchar(char c)
{
	while (uart0->ucr & UART_BUSY) ;
 8dc:	28 62 00 00 	lw r2,(r3+0)
 8e0:	20 42 00 10 	andi r2,r2,0x10
 8e4:	5c 40 ff fe 	bne r2,r0,8dc <uart_putstr+0x14>
	uart0->rxtx = c;
 8e8:	58 64 00 04 	sw (r3+4),r4
void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
		uart_putchar(*c);
		c++;
 8ec:	34 21 00 01 	addi r1,r1,1
}

void uart_putstr(char *str)
{
	char *c = str;
	while(*c) {
 8f0:	40 24 00 00 	lbu r4,(r1+0)
 8f4:	5c 82 ff fa 	bne r4,r2,8dc <uart_putstr+0x14>
 8f8:	c3 a0 00 00 	ret

000008fc <gpio_get_in>:


char gpio_get_in()
{   
	
	return gpio0->gpio_in;
 8fc:	78 01 00 00 	mvhi r1,0x0
 900:	38 21 0b d8 	ori r1,r1,0xbd8
 904:	28 21 00 00 	lw r1,(r1+0)
 908:	28 21 00 00 	lw r1,(r1+0)
}
 90c:	20 21 00 ff 	andi r1,r1,0xff
 910:	c3 a0 00 00 	ret

00000914 <gpio_get_dir>:

char gpio_get_dir()
{   
	
	return gpio0->gpio_dir;
 914:	78 01 00 00 	mvhi r1,0x0
 918:	38 21 0b d8 	ori r1,r1,0xbd8
 91c:	28 21 00 00 	lw r1,(r1+0)
 920:	28 21 00 08 	lw r1,(r1+8)
}
 924:	20 21 00 ff 	andi r1,r1,0xff
 928:	c3 a0 00 00 	ret

0000092c <gpio_put_out>:


void gpio_put_out(char c)
{
	
	gpio0->gpio_out = c;
 92c:	78 02 00 00 	mvhi r2,0x0
 930:	38 42 0b d8 	ori r2,r2,0xbd8
 934:	28 42 00 00 	lw r2,(r2+0)
}



void gpio_put_out(char c)
{
 938:	20 21 00 ff 	andi r1,r1,0xff
	
	gpio0->gpio_out = c;
 93c:	58 41 00 04 	sw (r2+4),r1
}
 940:	c3 a0 00 00 	ret

00000944 <gpio_put_dir>:

void gpio_put_dir(char c)
{
	
	gpio0->gpio_dir = c;
 944:	78 02 00 00 	mvhi r2,0x0
 948:	38 42 0b d8 	ori r2,r2,0xbd8
 94c:	28 42 00 00 	lw r2,(r2+0)
	
	gpio0->gpio_out = c;
}

void gpio_put_dir(char c)
{
 950:	20 21 00 ff 	andi r1,r1,0xff
	
	gpio0->gpio_dir = c;
 954:	58 41 00 08 	sw (r2+8),r1
}
 958:	c3 a0 00 00 	ret

0000095c <servo_put_T0>:
 */

void servo_put_T0(int c)
{
	
	servo0->servo_T0 = c;
 95c:	78 02 00 00 	mvhi r2,0x0
 960:	38 42 0b d4 	ori r2,r2,0xbd4
 964:	28 42 00 00 	lw r2,(r2+0)
 968:	58 41 00 00 	sw (r2+0),r1
}
 96c:	c3 a0 00 00 	ret

00000970 <servo_put_D0>:

void servo_put_D0(int c)
{
	
	servo0->servo_D0 = c;
 970:	78 02 00 00 	mvhi r2,0x0
 974:	38 42 0b d4 	ori r2,r2,0xbd4
 978:	28 42 00 00 	lw r2,(r2+0)
 97c:	58 41 00 04 	sw (r2+4),r1
}
 980:	c3 a0 00 00 	ret

00000984 <servo_put_T1>:
void servo_put_T1(int c)
{
	
	servo0->servo_T1 = c;
 984:	78 02 00 00 	mvhi r2,0x0
 988:	38 42 0b d4 	ori r2,r2,0xbd4
 98c:	28 42 00 00 	lw r2,(r2+0)
 990:	58 41 00 08 	sw (r2+8),r1
}
 994:	c3 a0 00 00 	ret

00000998 <servo_put_D1>:

void servo_put_D1(int c)
{
	
	servo0->servo_D1 = c;
 998:	78 02 00 00 	mvhi r2,0x0
 99c:	38 42 0b d4 	ori r2,r2,0xbd4
 9a0:	28 42 00 00 	lw r2,(r2+0)
 9a4:	58 41 00 0c 	sw (r2+12),r1
}
 9a8:	c3 a0 00 00 	ret

000009ac <servo_set_T0>:


void servo_set_T0(unsigned int c)
{      
	
	unsigned int a = 100000*c;
 9ac:	78 04 00 00 	mvhi r4,0x0
 9b0:	38 84 0b d0 	ori r4,r4,0xbd0
 9b4:	28 83 00 00 	lw r3,(r4+0)
	servo0->servo_T0 = a;
 9b8:	78 02 00 00 	mvhi r2,0x0
 9bc:	38 42 0b d4 	ori r2,r2,0xbd4


void servo_set_T0(unsigned int c)
{      
	
	unsigned int a = 100000*c;
 9c0:	88 23 08 00 	mul r1,r1,r3
	servo0->servo_T0 = a;
 9c4:	28 42 00 00 	lw r2,(r2+0)
 9c8:	58 41 00 00 	sw (r2+0),r1
	
}
 9cc:	c3 a0 00 00 	ret

000009d0 <servo_set_D0>:

void servo_set_D0(unsigned int c)
{
	unsigned int tmp = (c * 10000);
 9d0:	08 21 27 10 	muli r1,r1,10000
	unsigned int b = (tmp/18);
	unsigned int g = b + 100000;
 9d4:	78 04 00 00 	mvhi r4,0x0
}

void servo_set_D0(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
 9d8:	34 03 00 12 	mvi r3,18
	unsigned int g = b + 100000;
	servo0->servo_D0 = g;
 9dc:	78 02 00 00 	mvhi r2,0x0

void servo_set_D0(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
	unsigned int g = b + 100000;
 9e0:	38 84 0b d0 	ori r4,r4,0xbd0
}

void servo_set_D0(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
 9e4:	8c 23 08 00 	divu r1,r1,r3
	unsigned int g = b + 100000;
	servo0->servo_D0 = g;
 9e8:	38 42 0b d4 	ori r2,r2,0xbd4

void servo_set_D0(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
	unsigned int g = b + 100000;
 9ec:	28 83 00 00 	lw r3,(r4+0)
	servo0->servo_D0 = g;
 9f0:	28 42 00 00 	lw r2,(r2+0)

void servo_set_D0(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
	unsigned int g = b + 100000;
 9f4:	b4 23 08 00 	add r1,r1,r3
	servo0->servo_D0 = g;
 9f8:	58 41 00 04 	sw (r2+4),r1
}
 9fc:	c3 a0 00 00 	ret

00000a00 <servo_set_T1>:
void servo_set_T1(unsigned int c)
{       
	unsigned int a = 100000*c;
 a00:	78 04 00 00 	mvhi r4,0x0
 a04:	38 84 0b d0 	ori r4,r4,0xbd0
 a08:	28 83 00 00 	lw r3,(r4+0)
	servo0->servo_T1 = a;
 a0c:	78 02 00 00 	mvhi r2,0x0
 a10:	38 42 0b d4 	ori r2,r2,0xbd4
	unsigned int g = b + 100000;
	servo0->servo_D0 = g;
}
void servo_set_T1(unsigned int c)
{       
	unsigned int a = 100000*c;
 a14:	88 23 08 00 	mul r1,r1,r3
	servo0->servo_T1 = a;
 a18:	28 42 00 00 	lw r2,(r2+0)
 a1c:	58 41 00 08 	sw (r2+8),r1
}
 a20:	c3 a0 00 00 	ret

00000a24 <servo_set_D1>:


void servo_set_D1(unsigned int c)
{
	unsigned int tmp = (c * 10000);
 a24:	08 21 27 10 	muli r1,r1,10000
	unsigned int b = (tmp/18);
	unsigned int g = b + 100000;
 a28:	78 04 00 00 	mvhi r4,0x0


void servo_set_D1(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
 a2c:	34 03 00 12 	mvi r3,18
	unsigned int g = b + 100000;
	servo0->servo_D1 = g;
 a30:	78 02 00 00 	mvhi r2,0x0

void servo_set_D1(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
	unsigned int g = b + 100000;
 a34:	38 84 0b d0 	ori r4,r4,0xbd0


void servo_set_D1(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
 a38:	8c 23 08 00 	divu r1,r1,r3
	unsigned int g = b + 100000;
	servo0->servo_D1 = g;
 a3c:	38 42 0b d4 	ori r2,r2,0xbd4

void servo_set_D1(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
	unsigned int g = b + 100000;
 a40:	28 83 00 00 	lw r3,(r4+0)
	servo0->servo_D1 = g;
 a44:	28 42 00 00 	lw r2,(r2+0)

void servo_set_D1(unsigned int c)
{
	unsigned int tmp = (c * 10000);
	unsigned int b = (tmp/18);
	unsigned int g = b + 100000;
 a48:	b4 23 08 00 	add r1,r1,r3
	servo0->servo_D1 = g;
 a4c:	58 41 00 0c 	sw (r2+12),r1
}
 a50:	c3 a0 00 00 	ret

00000a54 <spi_start>:
 */
//These are the specific funtions for the rc522 rfid reader card

void spi_start()
{
	spi0->ucr=0x1;
 a54:	78 01 00 00 	mvhi r1,0x0
 a58:	38 21 0b e4 	ori r1,r1,0xbe4
 a5c:	28 21 00 00 	lw r1,(r1+0)
 a60:	34 02 00 01 	mvi r2,1
 a64:	58 22 00 00 	sw (r1+0),r2
	spi0->ucr=0x0;
 a68:	58 20 00 00 	sw (r1+0),r0
}
 a6c:	c3 a0 00 00 	ret

00000a70 <spi_read>:
unsigned char spi_read (char reg)
{
	//reg= reg<<1;
	uint32_t regAddress = (0x80 | (reg & 0x7E));
	regAddress = regAddress << 8;
 a70:	78 02 00 00 	mvhi r2,0x0
	spi0->ucr=0x0;
}
unsigned char spi_read (char reg)
{
	//reg= reg<<1;
	uint32_t regAddress = (0x80 | (reg & 0x7E));
 a74:	20 21 00 7e 	andi r1,r1,0x7e
	regAddress = regAddress << 8;
 a78:	38 42 0b e4 	ori r2,r2,0xbe4
	spi0->ucr=0x0;
}
unsigned char spi_read (char reg)
{
	//reg= reg<<1;
	uint32_t regAddress = (0x80 | (reg & 0x7E));
 a7c:	38 23 00 80 	ori r3,r1,0x80
	regAddress = regAddress << 8;
 a80:	28 41 00 00 	lw r1,(r2+0)
 a84:	3c 63 00 08 	sli r3,r3,8
	while(spi0->ucr & SPI_BUSY);
 a88:	28 22 00 00 	lw r2,(r1+0)
 a8c:	20 42 00 02 	andi r2,r2,0x2
 a90:	5c 40 ff fe 	bne r2,r0,a88 <spi_read+0x18>
	spi0->data_in= regAddress;
 a94:	58 23 00 04 	sw (r1+4),r3
 */
//These are the specific funtions for the rc522 rfid reader card

void spi_start()
{
	spi0->ucr=0x1;
 a98:	34 02 00 01 	mvi r2,1
 a9c:	58 22 00 00 	sw (r1+0),r2
	spi0->ucr=0x0;
 aa0:	58 20 00 00 	sw (r1+0),r0
	uint32_t regAddress = (0x80 | (reg & 0x7E));
	regAddress = regAddress << 8;
	while(spi0->ucr & SPI_BUSY);
	spi0->data_in= regAddress;
	spi_start();
	while(spi0->ucr & SPI_BUSY);
 aa4:	28 22 00 00 	lw r2,(r1+0)
 aa8:	20 42 00 02 	andi r2,r2,0x2
 aac:	5c 40 ff fe 	bne r2,r0,aa4 <spi_read+0x34>
	
	return spi0->data_out;	
 ab0:	28 21 00 08 	lw r1,(r1+8)
}
 ab4:	20 21 00 ff 	andi r1,r1,0xff
 ab8:	c3 a0 00 00 	ret

00000abc <spi_write>:
void spi_write (char reg, char value)
{
	//reg=reg<<1;
	uint32_t regAddress=(reg & 0x7E);
 abc:	20 21 00 7e 	andi r1,r1,0x7e
	regAddress = regAddress << 8;
 ac0:	3c 24 00 08 	sli r4,r1,8
	uint32_t data0 = regAddress | value;
 ac4:	78 03 00 00 	mvhi r3,0x0
 ac8:	38 63 0b e4 	ori r3,r3,0xbe4
	while(spi0->ucr & SPI_BUSY);
	
	return spi0->data_out;	
}
void spi_write (char reg, char value)
{
 acc:	20 42 00 ff 	andi r2,r2,0xff
	//reg=reg<<1;
	uint32_t regAddress=(reg & 0x7E);
	regAddress = regAddress << 8;
	uint32_t data0 = regAddress | value;
 ad0:	28 61 00 00 	lw r1,(r3+0)
 ad4:	b8 82 18 00 	or r3,r4,r2
	while(spi0->ucr & SPI_BUSY);
 ad8:	28 22 00 00 	lw r2,(r1+0)
 adc:	20 42 00 02 	andi r2,r2,0x2
 ae0:	5c 40 ff fe 	bne r2,r0,ad8 <spi_write+0x1c>
	spi0->data_in=data0;
 ae4:	58 23 00 04 	sw (r1+4),r3
 */
//These are the specific funtions for the rc522 rfid reader card

void spi_start()
{
	spi0->ucr=0x1;
 ae8:	34 02 00 01 	mvi r2,1
 aec:	58 22 00 00 	sw (r1+0),r2
	spi0->ucr=0x0;
 af0:	58 20 00 00 	sw (r1+0),r0
	regAddress = regAddress << 8;
	uint32_t data0 = regAddress | value;
	while(spi0->ucr & SPI_BUSY);
	spi0->data_in=data0;
	spi_start();
}
 af4:	c3 a0 00 00 	ret
