`timescale 1ns / 1ps

  module servo_TB;

       // Inputs
       	reg clk;
       	reg resetn;
   	reg [20:0]T0,T1;
	reg [16:0] D0,D1;
   	reg enb;
    	wire servo0,servo1;

	


  servo uut( .clk(clk),
	.rst(resetn),
	.T0(T0),
	.T1(T1),
	.D0(D0),
	.D1(D1),
	.enb(enb),
	.servo0(servo0),
	.servo1(servo1));

  initial begin
    // Initialize Inputs
    resetn = 0; clk = 0;
  end


//------------------------------------------
//          RESET GENERATION
//------------------------------------------

event reset_trigger;
event reset_done_trigger;

initial begin 
  forever begin 
   @ (reset_trigger);
   @ (negedge clk);
   resetn = 1;
   @ (negedge clk);
   resetn = 0;
   -> reset_done_trigger;
  end
end

//------------------------------------------
//          CLOCK GENERATION
//------------------------------------------

    parameter TBIT   = 1;
    parameter PERIOD = 20;
    parameter real DUTY_CYCLE = 0.5;
    parameter OFFSET = 0;


    initial    // Clock process for clk
    begin
        #OFFSET;
        forever
        begin
            clk = 1'b0;
            #(PERIOD-(PERIOD*DUTY_CYCLE)) clk = 1'b1;
            #(PERIOD*DUTY_CYCLE);
        end
    end

initial begin: TEST_CASE 
	
#150 -> reset_trigger;
@(reset_done_trigger);
#100 T0 <= 1000000;
#0   D0 <= 100000;
#0   T1 <= 1000000;
#0   D1 <= 75000;


end

   initial begin: TEST_DUMP
     $dumpfile("servo_TB.vcd");
     $dumpvars(-1, uut);
     #((PERIOD*DUTY_CYCLE)*3000000) $finish;
   end

endmodule
